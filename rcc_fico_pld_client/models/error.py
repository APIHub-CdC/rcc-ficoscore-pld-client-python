# coding: utf-8

"""
    Reporte de Crédito Consolidado, FICO® Score y PLD 

    <p>Esta API reporta: el historial crediticio; el cumplimiento de pago de los compromisos que la persona ha adquirido con entidades financieras, no financieras e instituciones comerciales que dan crédito o participan en actividades afines al crédito; y filtra contra listas de cumplimiento para Prevención de Lavado de Dinero. En esta versión se retornan los campos del Crédito Asociado a Nomina (CAN) en el nodo de créditos.<br/><img src='https://developer.circulodecredito.com.mx/sites/default/files/2020-10/circulo_de_credito-apihub.png' height='40' width='220'/></p><br/>  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: api@circulodecredito.com.mx
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rcc_fico_pld_client.configuration import Configuration


class Error(object):


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codigo': 'str',
        'mensaje': 'str'
    }

    attribute_map = {
        'codigo': 'codigo',
        'mensaje': 'mensaje'
    }

    def __init__(self, codigo=None, mensaje=None, _configuration=None):  # noqa: E501
        """Error - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._codigo = None
        self._mensaje = None
        self.discriminator = None

        if codigo is not None:
            self.codigo = codigo
        if mensaje is not None:
            self.mensaje = mensaje

    @property
    def codigo(self):
        """Gets the codigo of this Error.  # noqa: E501

        Código de error.  # noqa: E501

        :return: The codigo of this Error.  # noqa: E501
        :rtype: str
        """
        return self._codigo

    @codigo.setter
    def codigo(self, codigo):
        """Sets the codigo of this Error.

        Código de error.  # noqa: E501

        :param codigo: The codigo of this Error.  # noqa: E501
        :type: str
        """

        self._codigo = codigo

    @property
    def mensaje(self):
        """Gets the mensaje of this Error.  # noqa: E501

        Mensaje de error.  # noqa: E501

        :return: The mensaje of this Error.  # noqa: E501
        :rtype: str
        """
        return self._mensaje

    @mensaje.setter
    def mensaje(self, mensaje):
        """Sets the mensaje of this Error.

        Mensaje de error.  # noqa: E501

        :param mensaje: The mensaje of this Error.  # noqa: E501
        :type: str
        """

        self._mensaje = mensaje

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Error, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Error):
            return True

        return self.to_dict() != other.to_dict()
