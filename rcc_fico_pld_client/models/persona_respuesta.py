# coding: utf-8



import pprint
import re  # noqa: F401

import six

from rcc_fico_pld_client.configuration import Configuration


class PersonaRespuesta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apellido_paterno': 'str',
        'apellido_materno': 'str',
        'apellido_adicional': 'str',
        'nombres': 'str',
        'fecha_nacimiento': 'str',
        'rfc': 'str',
        'curp': 'str',
        'numero_seguridad_social': 'str',
        'nacionalidad': 'CatalogoNacionalidad',
        'residencia': 'CatalogoResidencia',
        'estado_civil': 'CatalogoEstadoCivil',
        'sexo': 'CatalogoSexo',
        'clave_elector_ife': 'str',
        'numero_dependientes': 'int',
        'fecha_defuncion': 'str'
    }

    attribute_map = {
        'apellido_paterno': 'apellidoPaterno',
        'apellido_materno': 'apellidoMaterno',
        'apellido_adicional': 'apellidoAdicional',
        'nombres': 'nombres',
        'fecha_nacimiento': 'fechaNacimiento',
        'rfc': 'RFC',
        'curp': 'CURP',
        'numero_seguridad_social': 'numeroSeguridadSocial',
        'nacionalidad': 'nacionalidad',
        'residencia': 'residencia',
        'estado_civil': 'estadoCivil',
        'sexo': 'sexo',
        'clave_elector_ife': 'claveElectorIFE',
        'numero_dependientes': 'numeroDependientes',
        'fecha_defuncion': 'fechaDefuncion'
    }

    def __init__(self, apellido_paterno=None, apellido_materno=None, apellido_adicional=None, nombres=None, fecha_nacimiento=None, rfc=None, curp=None, numero_seguridad_social=None, nacionalidad=None, residencia=None, estado_civil=None, sexo=None, clave_elector_ife=None, numero_dependientes=None, fecha_defuncion=None, _configuration=None):  # noqa: E501
        """PersonaRespuesta - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._apellido_paterno = None
        self._apellido_materno = None
        self._apellido_adicional = None
        self._nombres = None
        self._fecha_nacimiento = None
        self._rfc = None
        self._curp = None
        self._numero_seguridad_social = None
        self._nacionalidad = None
        self._residencia = None
        self._estado_civil = None
        self._sexo = None
        self._clave_elector_ife = None
        self._numero_dependientes = None
        self._fecha_defuncion = None
        self.discriminator = None

        if apellido_paterno is not None:
            self.apellido_paterno = apellido_paterno
        if apellido_materno is not None:
            self.apellido_materno = apellido_materno
        if apellido_adicional is not None:
            self.apellido_adicional = apellido_adicional
        if nombres is not None:
            self.nombres = nombres
        if fecha_nacimiento is not None:
            self.fecha_nacimiento = fecha_nacimiento
        if rfc is not None:
            self.rfc = rfc
        if curp is not None:
            self.curp = curp
        if numero_seguridad_social is not None:
            self.numero_seguridad_social = numero_seguridad_social
        if nacionalidad is not None:
            self.nacionalidad = nacionalidad
        if residencia is not None:
            self.residencia = residencia
        if estado_civil is not None:
            self.estado_civil = estado_civil
        if sexo is not None:
            self.sexo = sexo
        if clave_elector_ife is not None:
            self.clave_elector_ife = clave_elector_ife
        if numero_dependientes is not None:
            self.numero_dependientes = numero_dependientes
        if fecha_defuncion is not None:
            self.fecha_defuncion = fecha_defuncion

    @property
    def apellido_paterno(self):
        """Gets the apellido_paterno of this PersonaRespuesta.  # noqa: E501

        Apellido paterno de la persona  # noqa: E501

        :return: The apellido_paterno of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._apellido_paterno

    @apellido_paterno.setter
    def apellido_paterno(self, apellido_paterno):
        """Sets the apellido_paterno of this PersonaRespuesta.

        Apellido paterno de la persona  # noqa: E501

        :param apellido_paterno: The apellido_paterno of this PersonaRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                apellido_paterno is not None and len(apellido_paterno) > 30):
            raise ValueError("Invalid value for `apellido_paterno`, length must be less than or equal to `30`")  # noqa: E501

        self._apellido_paterno = apellido_paterno

    @property
    def apellido_materno(self):
        """Gets the apellido_materno of this PersonaRespuesta.  # noqa: E501

        Apellido materno de la persona  # noqa: E501

        :return: The apellido_materno of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._apellido_materno

    @apellido_materno.setter
    def apellido_materno(self, apellido_materno):
        """Sets the apellido_materno of this PersonaRespuesta.

        Apellido materno de la persona  # noqa: E501

        :param apellido_materno: The apellido_materno of this PersonaRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                apellido_materno is not None and len(apellido_materno) > 30):
            raise ValueError("Invalid value for `apellido_materno`, length must be less than or equal to `30`")  # noqa: E501

        self._apellido_materno = apellido_materno

    @property
    def apellido_adicional(self):
        """Gets the apellido_adicional of this PersonaRespuesta.  # noqa: E501

        Apellido adicional de la persona, si tuviere  # noqa: E501

        :return: The apellido_adicional of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._apellido_adicional

    @apellido_adicional.setter
    def apellido_adicional(self, apellido_adicional):
        """Sets the apellido_adicional of this PersonaRespuesta.

        Apellido adicional de la persona, si tuviere  # noqa: E501

        :param apellido_adicional: The apellido_adicional of this PersonaRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                apellido_adicional is not None and len(apellido_adicional) > 30):
            raise ValueError("Invalid value for `apellido_adicional`, length must be less than or equal to `30`")  # noqa: E501

        self._apellido_adicional = apellido_adicional

    @property
    def nombres(self):
        """Gets the nombres of this PersonaRespuesta.  # noqa: E501

        Primer nombre de la persona  # noqa: E501

        :return: The nombres of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._nombres

    @nombres.setter
    def nombres(self, nombres):
        """Sets the nombres of this PersonaRespuesta.

        Primer nombre de la persona  # noqa: E501

        :param nombres: The nombres of this PersonaRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nombres is not None and len(nombres) > 50):
            raise ValueError("Invalid value for `nombres`, length must be less than or equal to `50`")  # noqa: E501

        self._nombres = nombres

    @property
    def fecha_nacimiento(self):
        """Gets the fecha_nacimiento of this PersonaRespuesta.  # noqa: E501

        Fecha de nacimiento de la persona, en el formato especificado (por defecto yyyy-MM-dd)  # noqa: E501

        :return: The fecha_nacimiento of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._fecha_nacimiento

    @fecha_nacimiento.setter
    def fecha_nacimiento(self, fecha_nacimiento):
        """Sets the fecha_nacimiento of this PersonaRespuesta.

        Fecha de nacimiento de la persona, en el formato especificado (por defecto yyyy-MM-dd)  # noqa: E501

        :param fecha_nacimiento: The fecha_nacimiento of this PersonaRespuesta.  # noqa: E501
        :type: str
        """

        self._fecha_nacimiento = fecha_nacimiento

    @property
    def rfc(self):
        """Gets the rfc of this PersonaRespuesta.  # noqa: E501

        RFC con homoclave de la persona  # noqa: E501

        :return: The rfc of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._rfc

    @rfc.setter
    def rfc(self, rfc):
        """Sets the rfc of this PersonaRespuesta.

        RFC con homoclave de la persona  # noqa: E501

        :param rfc: The rfc of this PersonaRespuesta.  # noqa: E501
        :type: str
        """

        self._rfc = rfc

    @property
    def curp(self):
        """Gets the curp of this PersonaRespuesta.  # noqa: E501

        CURP de la persona, emitida por RENAPO  # noqa: E501

        :return: The curp of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._curp

    @curp.setter
    def curp(self, curp):
        """Sets the curp of this PersonaRespuesta.

        CURP de la persona, emitida por RENAPO  # noqa: E501

        :param curp: The curp of this PersonaRespuesta.  # noqa: E501
        :type: str
        """

        self._curp = curp

    @property
    def numero_seguridad_social(self):
        """Gets the numero_seguridad_social of this PersonaRespuesta.  # noqa: E501

        Debe colocar el número con el que el acreditado se encuentra afiliado a una institución de seguro social, el cual se compone por 11 caracteres Solo aplica para INFONAVIT y FOVISSSTE  # noqa: E501

        :return: The numero_seguridad_social of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._numero_seguridad_social

    @numero_seguridad_social.setter
    def numero_seguridad_social(self, numero_seguridad_social):
        """Sets the numero_seguridad_social of this PersonaRespuesta.

        Debe colocar el número con el que el acreditado se encuentra afiliado a una institución de seguro social, el cual se compone por 11 caracteres Solo aplica para INFONAVIT y FOVISSSTE  # noqa: E501

        :param numero_seguridad_social: The numero_seguridad_social of this PersonaRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                numero_seguridad_social is not None and len(numero_seguridad_social) > 11):
            raise ValueError("Invalid value for `numero_seguridad_social`, length must be less than or equal to `11`")  # noqa: E501

        self._numero_seguridad_social = numero_seguridad_social

    @property
    def nacionalidad(self):
        """Gets the nacionalidad of this PersonaRespuesta.  # noqa: E501


        :return: The nacionalidad of this PersonaRespuesta.  # noqa: E501
        :rtype: CatalogoNacionalidad
        """
        return self._nacionalidad

    @nacionalidad.setter
    def nacionalidad(self, nacionalidad):
        """Sets the nacionalidad of this PersonaRespuesta.


        :param nacionalidad: The nacionalidad of this PersonaRespuesta.  # noqa: E501
        :type: CatalogoNacionalidad
        """

        self._nacionalidad = nacionalidad

    @property
    def residencia(self):
        """Gets the residencia of this PersonaRespuesta.  # noqa: E501


        :return: The residencia of this PersonaRespuesta.  # noqa: E501
        :rtype: CatalogoResidencia
        """
        return self._residencia

    @residencia.setter
    def residencia(self, residencia):
        """Sets the residencia of this PersonaRespuesta.


        :param residencia: The residencia of this PersonaRespuesta.  # noqa: E501
        :type: CatalogoResidencia
        """

        self._residencia = residencia

    @property
    def estado_civil(self):
        """Gets the estado_civil of this PersonaRespuesta.  # noqa: E501


        :return: The estado_civil of this PersonaRespuesta.  # noqa: E501
        :rtype: CatalogoEstadoCivil
        """
        return self._estado_civil

    @estado_civil.setter
    def estado_civil(self, estado_civil):
        """Sets the estado_civil of this PersonaRespuesta.


        :param estado_civil: The estado_civil of this PersonaRespuesta.  # noqa: E501
        :type: CatalogoEstadoCivil
        """

        self._estado_civil = estado_civil

    @property
    def sexo(self):
        """Gets the sexo of this PersonaRespuesta.  # noqa: E501


        :return: The sexo of this PersonaRespuesta.  # noqa: E501
        :rtype: CatalogoSexo
        """
        return self._sexo

    @sexo.setter
    def sexo(self, sexo):
        """Sets the sexo of this PersonaRespuesta.


        :param sexo: The sexo of this PersonaRespuesta.  # noqa: E501
        :type: CatalogoSexo
        """

        self._sexo = sexo

    @property
    def clave_elector_ife(self):
        """Gets the clave_elector_ife of this PersonaRespuesta.  # noqa: E501

        La clave de elector que se encuentra en el IFE/INE.  # noqa: E501

        :return: The clave_elector_ife of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._clave_elector_ife

    @clave_elector_ife.setter
    def clave_elector_ife(self, clave_elector_ife):
        """Sets the clave_elector_ife of this PersonaRespuesta.

        La clave de elector que se encuentra en el IFE/INE.  # noqa: E501

        :param clave_elector_ife: The clave_elector_ife of this PersonaRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                clave_elector_ife is not None and len(clave_elector_ife) > 20):
            raise ValueError("Invalid value for `clave_elector_ife`, length must be less than or equal to `20`")  # noqa: E501

        self._clave_elector_ife = clave_elector_ife

    @property
    def numero_dependientes(self):
        """Gets the numero_dependientes of this PersonaRespuesta.  # noqa: E501

        Número de personas que dependen de la persona.  # noqa: E501

        :return: The numero_dependientes of this PersonaRespuesta.  # noqa: E501
        :rtype: int
        """
        return self._numero_dependientes

    @numero_dependientes.setter
    def numero_dependientes(self, numero_dependientes):
        """Sets the numero_dependientes of this PersonaRespuesta.

        Número de personas que dependen de la persona.  # noqa: E501

        :param numero_dependientes: The numero_dependientes of this PersonaRespuesta.  # noqa: E501
        :type: int
        """

        self._numero_dependientes = numero_dependientes

    @property
    def fecha_defuncion(self):
        """Gets the fecha_defuncion of this PersonaRespuesta.  # noqa: E501

        Fecha de nacimiento de la persona, en el formato especificado (por defecto yyyy-MM-dd)  # noqa: E501

        :return: The fecha_defuncion of this PersonaRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._fecha_defuncion

    @fecha_defuncion.setter
    def fecha_defuncion(self, fecha_defuncion):
        """Sets the fecha_defuncion of this PersonaRespuesta.

        Fecha de nacimiento de la persona, en el formato especificado (por defecto yyyy-MM-dd)  # noqa: E501

        :param fecha_defuncion: The fecha_defuncion of this PersonaRespuesta.  # noqa: E501
        :type: str
        """

        self._fecha_defuncion = fecha_defuncion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PersonaRespuesta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersonaRespuesta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PersonaRespuesta):
            return True

        return self.to_dict() != other.to_dict()
