# coding: utf-8




import pprint
import re  # noqa: F401

import six

from rcc_fico_pld_client.configuration import Configuration


class Score(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nombre_score': 'str',
        'valor': 'int',
        'razones': 'list[CatalogoRazones]'
    }

    attribute_map = {
        'nombre_score': 'nombreScore',
        'valor': 'valor',
        'razones': 'razones'
    }

    def __init__(self, nombre_score=None, valor=None, razones=None, _configuration=None):  # noqa: E501
        """Score - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nombre_score = None
        self._valor = None
        self._razones = None
        self.discriminator = None

        if nombre_score is not None:
            self.nombre_score = nombre_score
        if valor is not None:
            self.valor = valor
        if razones is not None:
            self.razones = razones

    @property
    def nombre_score(self):
        """Gets the nombre_score of this Score.  # noqa: E501

        Nombre del modelo o tipo de score que se est치 reportando.  # noqa: E501

        :return: The nombre_score of this Score.  # noqa: E501
        :rtype: str
        """
        return self._nombre_score

    @nombre_score.setter
    def nombre_score(self, nombre_score):
        """Sets the nombre_score of this Score.

        Nombre del modelo o tipo de score que se est치 reportando.  # noqa: E501

        :param nombre_score: The nombre_score of this Score.  # noqa: E501
        :type: str
        """

        self._nombre_score = nombre_score

    @property
    def valor(self):
        """Gets the valor of this Score.  # noqa: E501

        Valor de la calificaci칩n (SCORE) reportado. Los valores para FICO pueden ser 0 o dentro del intervalo 300 a 850.  # noqa: E501

        :return: The valor of this Score.  # noqa: E501
        :rtype: int
        """
        return self._valor

    @valor.setter
    def valor(self, valor):
        """Sets the valor of this Score.

        Valor de la calificaci칩n (SCORE) reportado. Los valores para FICO pueden ser 0 o dentro del intervalo 300 a 850.  # noqa: E501

        :param valor: The valor of this Score.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                valor is not None and valor > 900):  # noqa: E501
            raise ValueError("Invalid value for `valor`, must be a value less than or equal to `900`")  # noqa: E501
        if (self._configuration.client_side_validation and
                valor is not None and valor < 0):  # noqa: E501
            raise ValueError("Invalid value for `valor`, must be a value greater than or equal to `0`")  # noqa: E501

        self._valor = valor

    @property
    def razones(self):
        """Gets the razones of this Score.  # noqa: E501


        :return: The razones of this Score.  # noqa: E501
        :rtype: list[CatalogoRazones]
        """
        return self._razones

    @razones.setter
    def razones(self, razones):
        """Sets the razones of this Score.


        :param razones: The razones of this Score.  # noqa: E501
        :type: list[CatalogoRazones]
        """

        self._razones = razones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Score, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Score):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Score):
            return True

        return self.to_dict() != other.to_dict()
