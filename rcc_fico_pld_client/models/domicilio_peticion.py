# coding: utf-8

"""
    Reporte de Crédito Consolidado, FICO® Score y PLD 

    <p>Esta API reporta: el historial crediticio; el cumplimiento de pago de los compromisos que la persona ha adquirido con entidades financieras, no financieras e instituciones comerciales que dan crédito o participan en actividades afines al crédito; y filtra contra listas de cumplimiento para Prevención de Lavado de Dinero. En esta versión se retornan los campos del Crédito Asociado a Nomina (CAN) en el nodo de créditos.<br/><img src='https://developer.circulodecredito.com.mx/sites/default/files/2020-10/circulo_de_credito-apihub.png' height='40' width='220'/></p><br/>  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: api@circulodecredito.com.mx
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rcc_fico_pld_client.configuration import Configuration


class DomicilioPeticion(object):

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direccion': 'str',
        'colonia_poblacion': 'str',
        'delegacion_municipio': 'str',
        'ciudad': 'str',
        'estado': 'CatalogoEstados',
        'cp': 'str',
        'fecha_residencia': 'str',
        'numero_telefono': 'str',
        'tipo_domicilio': 'CatalogoTipoDomicilio',
        'tipo_asentamiento': 'CatalogoTipoAsentamiento'
    }

    attribute_map = {
        'direccion': 'direccion',
        'colonia_poblacion': 'coloniaPoblacion',
        'delegacion_municipio': 'delegacionMunicipio',
        'ciudad': 'ciudad',
        'estado': 'estado',
        'cp': 'CP',
        'fecha_residencia': 'fechaResidencia',
        'numero_telefono': 'numeroTelefono',
        'tipo_domicilio': 'tipoDomicilio',
        'tipo_asentamiento': 'tipoAsentamiento'
    }

    def __init__(self, direccion=None, colonia_poblacion=None, delegacion_municipio=None, ciudad=None, estado=None, cp=None, fecha_residencia=None, numero_telefono=None, tipo_domicilio=None, tipo_asentamiento=None, _configuration=None):  # noqa: E501
        """DomicilioPeticion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._direccion = None
        self._colonia_poblacion = None
        self._delegacion_municipio = None
        self._ciudad = None
        self._estado = None
        self._cp = None
        self._fecha_residencia = None
        self._numero_telefono = None
        self._tipo_domicilio = None
        self._tipo_asentamiento = None
        self.discriminator = None

        self.direccion = direccion
        self.colonia_poblacion = colonia_poblacion
        self.delegacion_municipio = delegacion_municipio
        self.ciudad = ciudad
        self.estado = estado
        self.cp = cp
        if fecha_residencia is not None:
            self.fecha_residencia = fecha_residencia
        if numero_telefono is not None:
            self.numero_telefono = numero_telefono
        if tipo_domicilio is not None:
            self.tipo_domicilio = tipo_domicilio
        if tipo_asentamiento is not None:
            self.tipo_asentamiento = tipo_asentamiento

    @property
    def direccion(self):
        """Gets the direccion of this DomicilioPeticion.  # noqa: E501

        Reportar el nombre de la calle, número exterior, número interior. Deben considerarse avenida,cerrada, manzana, lote, edificio,departamento etc. Debe contener por lo menos dos cadenas de caracteres para que el registro sea válido, de lo contrario el registro será rechazado.  # noqa: E501

        :return: The direccion of this DomicilioPeticion.  # noqa: E501
        :rtype: str
        """
        return self._direccion

    @direccion.setter
    def direccion(self, direccion):
        """Sets the direccion of this DomicilioPeticion.

        Reportar el nombre de la calle, número exterior, número interior. Deben considerarse avenida,cerrada, manzana, lote, edificio,departamento etc. Debe contener por lo menos dos cadenas de caracteres para que el registro sea válido, de lo contrario el registro será rechazado.  # noqa: E501

        :param direccion: The direccion of this DomicilioPeticion.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and direccion is None:
            raise ValueError("Invalid value for `direccion`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                direccion is not None and len(direccion) > 85):
            raise ValueError("Invalid value for `direccion`, length must be less than or equal to `85`")  # noqa: E501

        self._direccion = direccion

    @property
    def colonia_poblacion(self):
        """Gets the colonia_poblacion of this DomicilioPeticion.  # noqa: E501

        Reportar la colonia a la cual pertenece la dirección contenida en el elemento dirección.  # noqa: E501

        :return: The colonia_poblacion of this DomicilioPeticion.  # noqa: E501
        :rtype: str
        """
        return self._colonia_poblacion

    @colonia_poblacion.setter
    def colonia_poblacion(self, colonia_poblacion):
        """Sets the colonia_poblacion of this DomicilioPeticion.

        Reportar la colonia a la cual pertenece la dirección contenida en el elemento dirección.  # noqa: E501

        :param colonia_poblacion: The colonia_poblacion of this DomicilioPeticion.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and colonia_poblacion is None:
            raise ValueError("Invalid value for `colonia_poblacion`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                colonia_poblacion is not None and len(colonia_poblacion) > 65):
            raise ValueError("Invalid value for `colonia_poblacion`, length must be less than or equal to `65`")  # noqa: E501

        self._colonia_poblacion = colonia_poblacion

    @property
    def delegacion_municipio(self):
        """Gets the delegacion_municipio of this DomicilioPeticion.  # noqa: E501

        Reportar la delegación o municipio a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :return: The delegacion_municipio of this DomicilioPeticion.  # noqa: E501
        :rtype: str
        """
        return self._delegacion_municipio

    @delegacion_municipio.setter
    def delegacion_municipio(self, delegacion_municipio):
        """Sets the delegacion_municipio of this DomicilioPeticion.

        Reportar la delegación o municipio a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :param delegacion_municipio: The delegacion_municipio of this DomicilioPeticion.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and delegacion_municipio is None:
            raise ValueError("Invalid value for `delegacion_municipio`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                delegacion_municipio is not None and len(delegacion_municipio) > 65):
            raise ValueError("Invalid value for `delegacion_municipio`, length must be less than or equal to `65`")  # noqa: E501

        self._delegacion_municipio = delegacion_municipio

    @property
    def ciudad(self):
        """Gets the ciudad of this DomicilioPeticion.  # noqa: E501

        Reportar la ciudad a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :return: The ciudad of this DomicilioPeticion.  # noqa: E501
        :rtype: str
        """
        return self._ciudad

    @ciudad.setter
    def ciudad(self, ciudad):
        """Sets the ciudad of this DomicilioPeticion.

        Reportar la ciudad a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :param ciudad: The ciudad of this DomicilioPeticion.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ciudad is None:
            raise ValueError("Invalid value for `ciudad`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ciudad is not None and len(ciudad) > 65):
            raise ValueError("Invalid value for `ciudad`, length must be less than or equal to `65`")  # noqa: E501

        self._ciudad = ciudad

    @property
    def estado(self):
        """Gets the estado of this DomicilioPeticion.  # noqa: E501


        :return: The estado of this DomicilioPeticion.  # noqa: E501
        :rtype: CatalogoEstados
        """
        return self._estado

    @estado.setter
    def estado(self, estado):
        """Sets the estado of this DomicilioPeticion.


        :param estado: The estado of this DomicilioPeticion.  # noqa: E501
        :type: CatalogoEstados
        """
        if self._configuration.client_side_validation and estado is None:
            raise ValueError("Invalid value for `estado`, must not be `None`")  # noqa: E501

        self._estado = estado

    @property
    def cp(self):
        """Gets the cp of this DomicilioPeticion.  # noqa: E501

        El código postal reportado debeestar compuesto por 5 dígitos. Para que el código postal sea válido deberá corresponder al estado reportado.  # noqa: E501

        :return: The cp of this DomicilioPeticion.  # noqa: E501
        :rtype: str
        """
        return self._cp

    @cp.setter
    def cp(self, cp):
        """Sets the cp of this DomicilioPeticion.

        El código postal reportado debeestar compuesto por 5 dígitos. Para que el código postal sea válido deberá corresponder al estado reportado.  # noqa: E501

        :param cp: The cp of this DomicilioPeticion.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and cp is None:
            raise ValueError("Invalid value for `cp`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cp is not None and len(cp) > 5):
            raise ValueError("Invalid value for `cp`, length must be less than or equal to `5`")  # noqa: E501
        if (self._configuration.client_side_validation and
                cp is not None and len(cp) < 5):
            raise ValueError("Invalid value for `cp`, length must be greater than or equal to `5`")  # noqa: E501

        self._cp = cp

    @property
    def fecha_residencia(self):
        """Gets the fecha_residencia of this DomicilioPeticion.  # noqa: E501

        Debe de reportarse la fecha desde cuando el consumidor vive en la  dirección reportada.  # noqa: E501

        :return: The fecha_residencia of this DomicilioPeticion.  # noqa: E501
        :rtype: str
        """
        return self._fecha_residencia

    @fecha_residencia.setter
    def fecha_residencia(self, fecha_residencia):
        """Sets the fecha_residencia of this DomicilioPeticion.

        Debe de reportarse la fecha desde cuando el consumidor vive en la  dirección reportada.  # noqa: E501

        :param fecha_residencia: The fecha_residencia of this DomicilioPeticion.  # noqa: E501
        :type: str
        """

        self._fecha_residencia = fecha_residencia

    @property
    def numero_telefono(self):
        """Gets the numero_telefono of this DomicilioPeticion.  # noqa: E501

        Debe de contener una longitud mínima de 5 caracteres. Cada carácter debe ser un número de 0-9, si se ingresa cualquier otro carácter el registro será rechazado.  # noqa: E501

        :return: The numero_telefono of this DomicilioPeticion.  # noqa: E501
        :rtype: str
        """
        return self._numero_telefono

    @numero_telefono.setter
    def numero_telefono(self, numero_telefono):
        """Sets the numero_telefono of this DomicilioPeticion.

        Debe de contener una longitud mínima de 5 caracteres. Cada carácter debe ser un número de 0-9, si se ingresa cualquier otro carácter el registro será rechazado.  # noqa: E501

        :param numero_telefono: The numero_telefono of this DomicilioPeticion.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                numero_telefono is not None and len(numero_telefono) > 20):
            raise ValueError("Invalid value for `numero_telefono`, length must be less than or equal to `20`")  # noqa: E501

        self._numero_telefono = numero_telefono

    @property
    def tipo_domicilio(self):
        """Gets the tipo_domicilio of this DomicilioPeticion.  # noqa: E501


        :return: The tipo_domicilio of this DomicilioPeticion.  # noqa: E501
        :rtype: CatalogoTipoDomicilio
        """
        return self._tipo_domicilio

    @tipo_domicilio.setter
    def tipo_domicilio(self, tipo_domicilio):
        """Sets the tipo_domicilio of this DomicilioPeticion.


        :param tipo_domicilio: The tipo_domicilio of this DomicilioPeticion.  # noqa: E501
        :type: CatalogoTipoDomicilio
        """

        self._tipo_domicilio = tipo_domicilio

    @property
    def tipo_asentamiento(self):
        """Gets the tipo_asentamiento of this DomicilioPeticion.  # noqa: E501


        :return: The tipo_asentamiento of this DomicilioPeticion.  # noqa: E501
        :rtype: CatalogoTipoAsentamiento
        """
        return self._tipo_asentamiento

    @tipo_asentamiento.setter
    def tipo_asentamiento(self, tipo_asentamiento):
        """Sets the tipo_asentamiento of this DomicilioPeticion.


        :param tipo_asentamiento: The tipo_asentamiento of this DomicilioPeticion.  # noqa: E501
        :type: CatalogoTipoAsentamiento
        """

        self._tipo_asentamiento = tipo_asentamiento

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomicilioPeticion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomicilioPeticion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DomicilioPeticion):
            return True

        return self.to_dict() != other.to_dict()
