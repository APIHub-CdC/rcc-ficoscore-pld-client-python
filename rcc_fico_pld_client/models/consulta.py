# coding: utf-8

"""
    Reporte de Crédito Consolidado, FICO® Score y PLD 

    <p>Esta API reporta: el historial crediticio; el cumplimiento de pago de los compromisos que la persona ha adquirido con entidades financieras, no financieras e instituciones comerciales que dan crédito o participan en actividades afines al crédito; y filtra contra listas de cumplimiento para Prevención de Lavado de Dinero. En esta versión se retornan los campos del Crédito Asociado a Nomina (CAN) en el nodo de créditos.<br/><img src='https://developer.circulodecredito.com.mx/sites/default/files/2020-10/circulo_de_credito-apihub.png' height='40' width='220'/></p><br/>  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: api@circulodecredito.com.mx
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rcc_fico_pld_client.configuration import Configuration


class Consulta(object):
 

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fecha_consulta': 'str',
        'clave_otorgante': 'str',
        'nombre_otorgante': 'str',
        'direccion_otorgante': 'str',
        'telefono_otorgante': 'str',
        'tipo_credito': 'str',
        'clave_unidad_monetaria': 'CatalogoMoneda',
        'importe_credito': 'float',
        'tipo_responsabilidad': 'CatalogoTipoResponsabilidad',
        'id_domicilio': 'str',
        'servicios': 'str'
    }

    attribute_map = {
        'fecha_consulta': 'fechaConsulta',
        'clave_otorgante': 'claveOtorgante',
        'nombre_otorgante': 'nombreOtorgante',
        'direccion_otorgante': 'direccionOtorgante',
        'telefono_otorgante': 'telefonoOtorgante',
        'tipo_credito': 'tipoCredito',
        'clave_unidad_monetaria': 'claveUnidadMonetaria',
        'importe_credito': 'importeCredito',
        'tipo_responsabilidad': 'tipoResponsabilidad',
        'id_domicilio': 'idDomicilio',
        'servicios': 'servicios'
    }

    def __init__(self, fecha_consulta=None, clave_otorgante=None, nombre_otorgante=None, direccion_otorgante=None, telefono_otorgante=None, tipo_credito=None, clave_unidad_monetaria=None, importe_credito=None, tipo_responsabilidad=None, id_domicilio=None, servicios=None, _configuration=None):  # noqa: E501
        """Consulta - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fecha_consulta = None
        self._clave_otorgante = None
        self._nombre_otorgante = None
        self._direccion_otorgante = None
        self._telefono_otorgante = None
        self._tipo_credito = None
        self._clave_unidad_monetaria = None
        self._importe_credito = None
        self._tipo_responsabilidad = None
        self._id_domicilio = None
        self._servicios = None
        self.discriminator = None

        if fecha_consulta is not None:
            self.fecha_consulta = fecha_consulta
        if clave_otorgante is not None:
            self.clave_otorgante = clave_otorgante
        if nombre_otorgante is not None:
            self.nombre_otorgante = nombre_otorgante
        if direccion_otorgante is not None:
            self.direccion_otorgante = direccion_otorgante
        if telefono_otorgante is not None:
            self.telefono_otorgante = telefono_otorgante
        if tipo_credito is not None:
            self.tipo_credito = tipo_credito
        if clave_unidad_monetaria is not None:
            self.clave_unidad_monetaria = clave_unidad_monetaria
        if importe_credito is not None:
            self.importe_credito = importe_credito
        if tipo_responsabilidad is not None:
            self.tipo_responsabilidad = tipo_responsabilidad
        if id_domicilio is not None:
            self.id_domicilio = id_domicilio
        if servicios is not None:
            self.servicios = servicios

    @property
    def fecha_consulta(self):
        """Gets the fecha_consulta of this Consulta.  # noqa: E501

        Fecha de la consulta.  # noqa: E501

        :return: The fecha_consulta of this Consulta.  # noqa: E501
        :rtype: str
        """
        return self._fecha_consulta

    @fecha_consulta.setter
    def fecha_consulta(self, fecha_consulta):
        """Sets the fecha_consulta of this Consulta.

        Fecha de la consulta.  # noqa: E501

        :param fecha_consulta: The fecha_consulta of this Consulta.  # noqa: E501
        :type: str
        """

        self._fecha_consulta = fecha_consulta

    @property
    def clave_otorgante(self):
        """Gets the clave_otorgante of this Consulta.  # noqa: E501

        Contiene la clave del otorgante que reporta el crédito. <br>Nota: Este elemento solo es reportado para reporte de crédito especial.  # noqa: E501

        :return: The clave_otorgante of this Consulta.  # noqa: E501
        :rtype: str
        """
        return self._clave_otorgante

    @clave_otorgante.setter
    def clave_otorgante(self, clave_otorgante):
        """Sets the clave_otorgante of this Consulta.

        Contiene la clave del otorgante que reporta el crédito. <br>Nota: Este elemento solo es reportado para reporte de crédito especial.  # noqa: E501

        :param clave_otorgante: The clave_otorgante of this Consulta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                clave_otorgante is not None and len(clave_otorgante) > 10):
            raise ValueError("Invalid value for `clave_otorgante`, length must be less than or equal to `10`")  # noqa: E501

        self._clave_otorgante = clave_otorgante

    @property
    def nombre_otorgante(self):
        """Gets the nombre_otorgante of this Consulta.  # noqa: E501

        Contiene el Nombre del Otorgante de Crédito que reporto el Crédito. Ver Tabla: Tipo de Negocio. <br>Nota: Este elemento solo es reportado para reporte de crédito especial.  # noqa: E501

        :return: The nombre_otorgante of this Consulta.  # noqa: E501
        :rtype: str
        """
        return self._nombre_otorgante

    @nombre_otorgante.setter
    def nombre_otorgante(self, nombre_otorgante):
        """Sets the nombre_otorgante of this Consulta.

        Contiene el Nombre del Otorgante de Crédito que reporto el Crédito. Ver Tabla: Tipo de Negocio. <br>Nota: Este elemento solo es reportado para reporte de crédito especial.  # noqa: E501

        :param nombre_otorgante: The nombre_otorgante of this Consulta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nombre_otorgante is not None and len(nombre_otorgante) > 40):
            raise ValueError("Invalid value for `nombre_otorgante`, length must be less than or equal to `40`")  # noqa: E501

        self._nombre_otorgante = nombre_otorgante

    @property
    def direccion_otorgante(self):
        """Gets the direccion_otorgante of this Consulta.  # noqa: E501

        Se presentará la Dirección de la Institución Otorgante que reporta la cuenta.  # noqa: E501

        :return: The direccion_otorgante of this Consulta.  # noqa: E501
        :rtype: str
        """
        return self._direccion_otorgante

    @direccion_otorgante.setter
    def direccion_otorgante(self, direccion_otorgante):
        """Sets the direccion_otorgante of this Consulta.

        Se presentará la Dirección de la Institución Otorgante que reporta la cuenta.  # noqa: E501

        :param direccion_otorgante: The direccion_otorgante of this Consulta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                direccion_otorgante is not None and len(direccion_otorgante) > 80):
            raise ValueError("Invalid value for `direccion_otorgante`, length must be less than or equal to `80`")  # noqa: E501

        self._direccion_otorgante = direccion_otorgante

    @property
    def telefono_otorgante(self):
        """Gets the telefono_otorgante of this Consulta.  # noqa: E501

        Se presentará el teléfono de la Institución Otorgante que reporta la cuenta.  # noqa: E501

        :return: The telefono_otorgante of this Consulta.  # noqa: E501
        :rtype: str
        """
        return self._telefono_otorgante

    @telefono_otorgante.setter
    def telefono_otorgante(self, telefono_otorgante):
        """Sets the telefono_otorgante of this Consulta.

        Se presentará el teléfono de la Institución Otorgante que reporta la cuenta.  # noqa: E501

        :param telefono_otorgante: The telefono_otorgante of this Consulta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                telefono_otorgante is not None and len(telefono_otorgante) > 20):
            raise ValueError("Invalid value for `telefono_otorgante`, length must be less than or equal to `20`")  # noqa: E501

        self._telefono_otorgante = telefono_otorgante

    @property
    def tipo_credito(self):
        """Gets the tipo_credito of this Consulta.  # noqa: E501

        Tipo de crédito que se solicitó.  # noqa: E501

        :return: The tipo_credito of this Consulta.  # noqa: E501
        :rtype: str
        """
        return self._tipo_credito

    @tipo_credito.setter
    def tipo_credito(self, tipo_credito):
        """Sets the tipo_credito of this Consulta.

        Tipo de crédito que se solicitó.  # noqa: E501

        :param tipo_credito: The tipo_credito of this Consulta.  # noqa: E501
        :type: str
        """

        self._tipo_credito = tipo_credito

    @property
    def clave_unidad_monetaria(self):
        """Gets the clave_unidad_monetaria of this Consulta.  # noqa: E501


        :return: The clave_unidad_monetaria of this Consulta.  # noqa: E501
        :rtype: CatalogoMoneda
        """
        return self._clave_unidad_monetaria

    @clave_unidad_monetaria.setter
    def clave_unidad_monetaria(self, clave_unidad_monetaria):
        """Sets the clave_unidad_monetaria of this Consulta.


        :param clave_unidad_monetaria: The clave_unidad_monetaria of this Consulta.  # noqa: E501
        :type: CatalogoMoneda
        """

        self._clave_unidad_monetaria = clave_unidad_monetaria

    @property
    def importe_credito(self):
        """Gets the importe_credito of this Consulta.  # noqa: E501

        Monto solicitado.  # noqa: E501

        :return: The importe_credito of this Consulta.  # noqa: E501
        :rtype: float
        """
        return self._importe_credito

    @importe_credito.setter
    def importe_credito(self, importe_credito):
        """Sets the importe_credito of this Consulta.

        Monto solicitado.  # noqa: E501

        :param importe_credito: The importe_credito of this Consulta.  # noqa: E501
        :type: float
        """

        self._importe_credito = importe_credito

    @property
    def tipo_responsabilidad(self):
        """Gets the tipo_responsabilidad of this Consulta.  # noqa: E501


        :return: The tipo_responsabilidad of this Consulta.  # noqa: E501
        :rtype: CatalogoTipoResponsabilidad
        """
        return self._tipo_responsabilidad

    @tipo_responsabilidad.setter
    def tipo_responsabilidad(self, tipo_responsabilidad):
        """Sets the tipo_responsabilidad of this Consulta.


        :param tipo_responsabilidad: The tipo_responsabilidad of this Consulta.  # noqa: E501
        :type: CatalogoTipoResponsabilidad
        """

        self._tipo_responsabilidad = tipo_responsabilidad

    @property
    def id_domicilio(self):
        """Gets the id_domicilio of this Consulta.  # noqa: E501

        Identificador único del domicilio  # noqa: E501

        :return: The id_domicilio of this Consulta.  # noqa: E501
        :rtype: str
        """
        return self._id_domicilio

    @id_domicilio.setter
    def id_domicilio(self, id_domicilio):
        """Sets the id_domicilio of this Consulta.

        Identificador único del domicilio  # noqa: E501

        :param id_domicilio: The id_domicilio of this Consulta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                id_domicilio is not None and len(id_domicilio) > 20):
            raise ValueError("Invalid value for `id_domicilio`, length must be less than or equal to `20`")  # noqa: E501

        self._id_domicilio = id_domicilio

    @property
    def servicios(self):
        """Gets the servicios of this Consulta.  # noqa: E501

        <table><thead><tr><th>Clave</th><th>Descripción</th></tr></thead><tbody><tr><td>0</td><td>Sin servicios</td></tr><tr><td>1</td><td>Servicios al hogar</td></tr></tbody></table>  # noqa: E501

        :return: The servicios of this Consulta.  # noqa: E501
        :rtype: str
        """
        return self._servicios

    @servicios.setter
    def servicios(self, servicios):
        """Sets the servicios of this Consulta.

        <table><thead><tr><th>Clave</th><th>Descripción</th></tr></thead><tbody><tr><td>0</td><td>Sin servicios</td></tr><tr><td>1</td><td>Servicios al hogar</td></tr></tbody></table>  # noqa: E501

        :param servicios: The servicios of this Consulta.  # noqa: E501
        :type: str
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if (self._configuration.client_side_validation and
                servicios not in allowed_values):
            raise ValueError(
                "Invalid value for `servicios` ({0}), must be one of {1}"  # noqa: E501
                .format(servicios, allowed_values)
            )

        self._servicios = servicios

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Consulta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Consulta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Consulta):
            return True

        return self.to_dict() != other.to_dict()
