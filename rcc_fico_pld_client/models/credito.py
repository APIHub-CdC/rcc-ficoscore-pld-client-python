# coding: utf-8

"""
    Reporte de Crédito Consolidado, FICO® Score y PLD 

    <p>Esta API reporta: el historial crediticio; el cumplimiento de pago de los compromisos que la persona ha adquirido con entidades financieras, no financieras e instituciones comerciales que dan crédito o participan en actividades afines al crédito; y filtra contra listas de cumplimiento para Prevención de Lavado de Dinero. En esta versión se retornan los campos del Crédito Asociado a Nomina (CAN) en el nodo de créditos.<br/><img src='https://developer.circulodecredito.com.mx/sites/default/files/2020-10/circulo_de_credito-apihub.png' height='40' width='220'/></p><br/>  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: api@circulodecredito.com.mx
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rcc_fico_pld_client.configuration import Configuration


class Credito(object):


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fecha_actualizacion': 'str',
        'registro_impugnado': 'int',
        'clave_otorgante': 'str',
        'nombre_otorgante': 'str',
        'cuenta_actual': 'str',
        'tipo_responsabilidad': 'CatalogoTipoResponsabilidad',
        'tipo_cuenta': 'CatalogoTipoCuenta',
        'tipo_credito': 'CatalogoTipoCredito',
        'clave_unidad_monetaria': 'CatalogoMoneda',
        'valor_activo_valuacion': 'int',
        'numero_pagos': 'int',
        'frecuencia_pagos': 'CatalogoFrecuenciaPago',
        'monto_pagar': 'float',
        'fecha_apertura_cuenta': 'str',
        'fecha_ultimo_pago': 'str',
        'fecha_ultima_compra': 'str',
        'fecha_cierre_cuenta': 'str',
        'fecha_reporte': 'str',
        'ultima_fecha_saldo_cero': 'str',
        'garantia': 'str',
        'credito_maximo': 'float',
        'saldo_actual': 'float',
        'limite_credito': 'float',
        'saldo_vencido': 'float',
        'numero_pagos_vencidos': 'int',
        'pago_actual': 'str',
        'historico_pagos': 'str',
        'fecha_reciente_historico_pagos': 'str',
        'fecha_antigua_historico_pagos': 'str',
        'clave_prevencion': 'CatalogoPrevencion',
        'total_pagos_reportados': 'int',
        'peor_atraso': 'float',
        'fecha_peor_atraso': 'str',
        'saldo_vencido_peor_atraso': 'float',
        'monto_ultimo_pago': 'float',
        'id_domicilio': 'str',
        'servicios': 'str',
        'can': 'CAN'
    }

    attribute_map = {
        'fecha_actualizacion': 'fechaActualizacion',
        'registro_impugnado': 'registroImpugnado',
        'clave_otorgante': 'claveOtorgante',
        'nombre_otorgante': 'nombreOtorgante',
        'cuenta_actual': 'cuentaActual',
        'tipo_responsabilidad': 'tipoResponsabilidad',
        'tipo_cuenta': 'tipoCuenta',
        'tipo_credito': 'tipoCredito',
        'clave_unidad_monetaria': 'claveUnidadMonetaria',
        'valor_activo_valuacion': 'valorActivoValuacion',
        'numero_pagos': 'numeroPagos',
        'frecuencia_pagos': 'frecuenciaPagos',
        'monto_pagar': 'montoPagar',
        'fecha_apertura_cuenta': 'fechaAperturaCuenta',
        'fecha_ultimo_pago': 'fechaUltimoPago',
        'fecha_ultima_compra': 'fechaUltimaCompra',
        'fecha_cierre_cuenta': 'fechaCierreCuenta',
        'fecha_reporte': 'fechaReporte',
        'ultima_fecha_saldo_cero': 'ultimaFechaSaldoCero',
        'garantia': 'garantia',
        'credito_maximo': 'creditoMaximo',
        'saldo_actual': 'saldoActual',
        'limite_credito': 'limiteCredito',
        'saldo_vencido': 'saldoVencido',
        'numero_pagos_vencidos': 'numeroPagosVencidos',
        'pago_actual': 'pagoActual',
        'historico_pagos': 'historicoPagos',
        'fecha_reciente_historico_pagos': 'fechaRecienteHistoricoPagos',
        'fecha_antigua_historico_pagos': 'fechaAntiguaHistoricoPagos',
        'clave_prevencion': 'clavePrevencion',
        'total_pagos_reportados': 'totalPagosReportados',
        'peor_atraso': 'peorAtraso',
        'fecha_peor_atraso': 'fechaPeorAtraso',
        'saldo_vencido_peor_atraso': 'saldoVencidoPeorAtraso',
        'monto_ultimo_pago': 'montoUltimoPago',
        'id_domicilio': 'idDomicilio',
        'servicios': 'servicios',
        'can': 'CAN'
    }

    def __init__(self, fecha_actualizacion=None, registro_impugnado=None, clave_otorgante=None, nombre_otorgante=None, cuenta_actual=None, tipo_responsabilidad=None, tipo_cuenta=None, tipo_credito=None, clave_unidad_monetaria=None, valor_activo_valuacion=None, numero_pagos=None, frecuencia_pagos=None, monto_pagar=None, fecha_apertura_cuenta=None, fecha_ultimo_pago=None, fecha_ultima_compra=None, fecha_cierre_cuenta=None, fecha_reporte=None, ultima_fecha_saldo_cero=None, garantia=None, credito_maximo=None, saldo_actual=None, limite_credito=None, saldo_vencido=None, numero_pagos_vencidos=None, pago_actual=None, historico_pagos=None, fecha_reciente_historico_pagos=None, fecha_antigua_historico_pagos=None, clave_prevencion=None, total_pagos_reportados=None, peor_atraso=None, fecha_peor_atraso=None, saldo_vencido_peor_atraso=None, monto_ultimo_pago=None, id_domicilio=None, servicios=None, can=None, _configuration=None):  # noqa: E501
        """Credito - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fecha_actualizacion = None
        self._registro_impugnado = None
        self._clave_otorgante = None
        self._nombre_otorgante = None
        self._cuenta_actual = None
        self._tipo_responsabilidad = None
        self._tipo_cuenta = None
        self._tipo_credito = None
        self._clave_unidad_monetaria = None
        self._valor_activo_valuacion = None
        self._numero_pagos = None
        self._frecuencia_pagos = None
        self._monto_pagar = None
        self._fecha_apertura_cuenta = None
        self._fecha_ultimo_pago = None
        self._fecha_ultima_compra = None
        self._fecha_cierre_cuenta = None
        self._fecha_reporte = None
        self._ultima_fecha_saldo_cero = None
        self._garantia = None
        self._credito_maximo = None
        self._saldo_actual = None
        self._limite_credito = None
        self._saldo_vencido = None
        self._numero_pagos_vencidos = None
        self._pago_actual = None
        self._historico_pagos = None
        self._fecha_reciente_historico_pagos = None
        self._fecha_antigua_historico_pagos = None
        self._clave_prevencion = None
        self._total_pagos_reportados = None
        self._peor_atraso = None
        self._fecha_peor_atraso = None
        self._saldo_vencido_peor_atraso = None
        self._monto_ultimo_pago = None
        self._id_domicilio = None
        self._servicios = None
        self._can = None
        self.discriminator = None

        if fecha_actualizacion is not None:
            self.fecha_actualizacion = fecha_actualizacion
        if registro_impugnado is not None:
            self.registro_impugnado = registro_impugnado
        if clave_otorgante is not None:
            self.clave_otorgante = clave_otorgante
        if nombre_otorgante is not None:
            self.nombre_otorgante = nombre_otorgante
        if cuenta_actual is not None:
            self.cuenta_actual = cuenta_actual
        if tipo_responsabilidad is not None:
            self.tipo_responsabilidad = tipo_responsabilidad
        if tipo_cuenta is not None:
            self.tipo_cuenta = tipo_cuenta
        if tipo_credito is not None:
            self.tipo_credito = tipo_credito
        if clave_unidad_monetaria is not None:
            self.clave_unidad_monetaria = clave_unidad_monetaria
        if valor_activo_valuacion is not None:
            self.valor_activo_valuacion = valor_activo_valuacion
        if numero_pagos is not None:
            self.numero_pagos = numero_pagos
        if frecuencia_pagos is not None:
            self.frecuencia_pagos = frecuencia_pagos
        if monto_pagar is not None:
            self.monto_pagar = monto_pagar
        if fecha_apertura_cuenta is not None:
            self.fecha_apertura_cuenta = fecha_apertura_cuenta
        if fecha_ultimo_pago is not None:
            self.fecha_ultimo_pago = fecha_ultimo_pago
        if fecha_ultima_compra is not None:
            self.fecha_ultima_compra = fecha_ultima_compra
        if fecha_cierre_cuenta is not None:
            self.fecha_cierre_cuenta = fecha_cierre_cuenta
        if fecha_reporte is not None:
            self.fecha_reporte = fecha_reporte
        if ultima_fecha_saldo_cero is not None:
            self.ultima_fecha_saldo_cero = ultima_fecha_saldo_cero
        if garantia is not None:
            self.garantia = garantia
        if credito_maximo is not None:
            self.credito_maximo = credito_maximo
        if saldo_actual is not None:
            self.saldo_actual = saldo_actual
        if limite_credito is not None:
            self.limite_credito = limite_credito
        if saldo_vencido is not None:
            self.saldo_vencido = saldo_vencido
        if numero_pagos_vencidos is not None:
            self.numero_pagos_vencidos = numero_pagos_vencidos
        if pago_actual is not None:
            self.pago_actual = pago_actual
        if historico_pagos is not None:
            self.historico_pagos = historico_pagos
        if fecha_reciente_historico_pagos is not None:
            self.fecha_reciente_historico_pagos = fecha_reciente_historico_pagos
        if fecha_antigua_historico_pagos is not None:
            self.fecha_antigua_historico_pagos = fecha_antigua_historico_pagos
        if clave_prevencion is not None:
            self.clave_prevencion = clave_prevencion
        if total_pagos_reportados is not None:
            self.total_pagos_reportados = total_pagos_reportados
        if peor_atraso is not None:
            self.peor_atraso = peor_atraso
        if fecha_peor_atraso is not None:
            self.fecha_peor_atraso = fecha_peor_atraso
        if saldo_vencido_peor_atraso is not None:
            self.saldo_vencido_peor_atraso = saldo_vencido_peor_atraso
        if monto_ultimo_pago is not None:
            self.monto_ultimo_pago = monto_ultimo_pago
        if id_domicilio is not None:
            self.id_domicilio = id_domicilio
        if servicios is not None:
            self.servicios = servicios
        if can is not None:
            self.can = can

    @property
    def fecha_actualizacion(self):
        """Gets the fecha_actualizacion of this Credito.  # noqa: E501

        Fecha en que se actualizó la información de la cuenta.  # noqa: E501

        :return: The fecha_actualizacion of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_actualizacion

    @fecha_actualizacion.setter
    def fecha_actualizacion(self, fecha_actualizacion):
        """Sets the fecha_actualizacion of this Credito.

        Fecha en que se actualizó la información de la cuenta.  # noqa: E501

        :param fecha_actualizacion: The fecha_actualizacion of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_actualizacion = fecha_actualizacion

    @property
    def registro_impugnado(self):
        """Gets the registro_impugnado of this Credito.  # noqa: E501

        En caso de que el valor sea mayor que cero, indica que es un registro impugnado por el Consumidor. La etiqueta muestra un dato igual a “0001” para Registro Impugnado. Si este se reporta, significa que el consumidor final solicitó una aclaración sobre esta cuenta, en apego a la Ley de las Sociedades de Información Crediticia.  # noqa: E501

        :return: The registro_impugnado of this Credito.  # noqa: E501
        :rtype: int
        """
        return self._registro_impugnado

    @registro_impugnado.setter
    def registro_impugnado(self, registro_impugnado):
        """Sets the registro_impugnado of this Credito.

        En caso de que el valor sea mayor que cero, indica que es un registro impugnado por el Consumidor. La etiqueta muestra un dato igual a “0001” para Registro Impugnado. Si este se reporta, significa que el consumidor final solicitó una aclaración sobre esta cuenta, en apego a la Ley de las Sociedades de Información Crediticia.  # noqa: E501

        :param registro_impugnado: The registro_impugnado of this Credito.  # noqa: E501
        :type: int
        """

        self._registro_impugnado = registro_impugnado

    @property
    def clave_otorgante(self):
        """Gets the clave_otorgante of this Credito.  # noqa: E501

        Contiene la clave del otorgante que reporta el crédito. <br>Nota: Este elemento solo es reportado para reporte de crédito especial.  # noqa: E501

        :return: The clave_otorgante of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._clave_otorgante

    @clave_otorgante.setter
    def clave_otorgante(self, clave_otorgante):
        """Sets the clave_otorgante of this Credito.

        Contiene la clave del otorgante que reporta el crédito. <br>Nota: Este elemento solo es reportado para reporte de crédito especial.  # noqa: E501

        :param clave_otorgante: The clave_otorgante of this Credito.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                clave_otorgante is not None and len(clave_otorgante) > 10):
            raise ValueError("Invalid value for `clave_otorgante`, length must be less than or equal to `10`")  # noqa: E501

        self._clave_otorgante = clave_otorgante

    @property
    def nombre_otorgante(self):
        """Gets the nombre_otorgante of this Credito.  # noqa: E501

        Contiene el Nombre del Otorgante de Crédito que reporto el Crédito. Ver Tabla: Tipo de Negocio. <br>Nota: Este elemento solo es reportado para reporte de crédito especial.  # noqa: E501

        :return: The nombre_otorgante of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._nombre_otorgante

    @nombre_otorgante.setter
    def nombre_otorgante(self, nombre_otorgante):
        """Sets the nombre_otorgante of this Credito.

        Contiene el Nombre del Otorgante de Crédito que reporto el Crédito. Ver Tabla: Tipo de Negocio. <br>Nota: Este elemento solo es reportado para reporte de crédito especial.  # noqa: E501

        :param nombre_otorgante: The nombre_otorgante of this Credito.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nombre_otorgante is not None and len(nombre_otorgante) > 40):
            raise ValueError("Invalid value for `nombre_otorgante`, length must be less than or equal to `40`")  # noqa: E501

        self._nombre_otorgante = nombre_otorgante

    @property
    def cuenta_actual(self):
        """Gets the cuenta_actual of this Credito.  # noqa: E501

        Número de cuenta del crédito  # noqa: E501

        :return: The cuenta_actual of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._cuenta_actual

    @cuenta_actual.setter
    def cuenta_actual(self, cuenta_actual):
        """Sets the cuenta_actual of this Credito.

        Número de cuenta del crédito  # noqa: E501

        :param cuenta_actual: The cuenta_actual of this Credito.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cuenta_actual is not None and len(cuenta_actual) > 25):
            raise ValueError("Invalid value for `cuenta_actual`, length must be less than or equal to `25`")  # noqa: E501

        self._cuenta_actual = cuenta_actual

    @property
    def tipo_responsabilidad(self):
        """Gets the tipo_responsabilidad of this Credito.  # noqa: E501


        :return: The tipo_responsabilidad of this Credito.  # noqa: E501
        :rtype: CatalogoTipoResponsabilidad
        """
        return self._tipo_responsabilidad

    @tipo_responsabilidad.setter
    def tipo_responsabilidad(self, tipo_responsabilidad):
        """Sets the tipo_responsabilidad of this Credito.


        :param tipo_responsabilidad: The tipo_responsabilidad of this Credito.  # noqa: E501
        :type: CatalogoTipoResponsabilidad
        """

        self._tipo_responsabilidad = tipo_responsabilidad

    @property
    def tipo_cuenta(self):
        """Gets the tipo_cuenta of this Credito.  # noqa: E501


        :return: The tipo_cuenta of this Credito.  # noqa: E501
        :rtype: CatalogoTipoCuenta
        """
        return self._tipo_cuenta

    @tipo_cuenta.setter
    def tipo_cuenta(self, tipo_cuenta):
        """Sets the tipo_cuenta of this Credito.


        :param tipo_cuenta: The tipo_cuenta of this Credito.  # noqa: E501
        :type: CatalogoTipoCuenta
        """

        self._tipo_cuenta = tipo_cuenta

    @property
    def tipo_credito(self):
        """Gets the tipo_credito of this Credito.  # noqa: E501


        :return: The tipo_credito of this Credito.  # noqa: E501
        :rtype: CatalogoTipoCredito
        """
        return self._tipo_credito

    @tipo_credito.setter
    def tipo_credito(self, tipo_credito):
        """Sets the tipo_credito of this Credito.


        :param tipo_credito: The tipo_credito of this Credito.  # noqa: E501
        :type: CatalogoTipoCredito
        """

        self._tipo_credito = tipo_credito

    @property
    def clave_unidad_monetaria(self):
        """Gets the clave_unidad_monetaria of this Credito.  # noqa: E501


        :return: The clave_unidad_monetaria of this Credito.  # noqa: E501
        :rtype: CatalogoMoneda
        """
        return self._clave_unidad_monetaria

    @clave_unidad_monetaria.setter
    def clave_unidad_monetaria(self, clave_unidad_monetaria):
        """Sets the clave_unidad_monetaria of this Credito.


        :param clave_unidad_monetaria: The clave_unidad_monetaria of this Credito.  # noqa: E501
        :type: CatalogoMoneda
        """

        self._clave_unidad_monetaria = clave_unidad_monetaria

    @property
    def valor_activo_valuacion(self):
        """Gets the valor_activo_valuacion of this Credito.  # noqa: E501

        Valor total del activo para propósitos de evaluación o recuperación. Es el valor monetario de la garantía.  # noqa: E501

        :return: The valor_activo_valuacion of this Credito.  # noqa: E501
        :rtype: int
        """
        return self._valor_activo_valuacion

    @valor_activo_valuacion.setter
    def valor_activo_valuacion(self, valor_activo_valuacion):
        """Sets the valor_activo_valuacion of this Credito.

        Valor total del activo para propósitos de evaluación o recuperación. Es el valor monetario de la garantía.  # noqa: E501

        :param valor_activo_valuacion: The valor_activo_valuacion of this Credito.  # noqa: E501
        :type: int
        """

        self._valor_activo_valuacion = valor_activo_valuacion

    @property
    def numero_pagos(self):
        """Gets the numero_pagos of this Credito.  # noqa: E501

        Total de pagos determinado en la apertura del crédito.  # noqa: E501

        :return: The numero_pagos of this Credito.  # noqa: E501
        :rtype: int
        """
        return self._numero_pagos

    @numero_pagos.setter
    def numero_pagos(self, numero_pagos):
        """Sets the numero_pagos of this Credito.

        Total de pagos determinado en la apertura del crédito.  # noqa: E501

        :param numero_pagos: The numero_pagos of this Credito.  # noqa: E501
        :type: int
        """

        self._numero_pagos = numero_pagos

    @property
    def frecuencia_pagos(self):
        """Gets the frecuencia_pagos of this Credito.  # noqa: E501


        :return: The frecuencia_pagos of this Credito.  # noqa: E501
        :rtype: CatalogoFrecuenciaPago
        """
        return self._frecuencia_pagos

    @frecuencia_pagos.setter
    def frecuencia_pagos(self, frecuencia_pagos):
        """Sets the frecuencia_pagos of this Credito.


        :param frecuencia_pagos: The frecuencia_pagos of this Credito.  # noqa: E501
        :type: CatalogoFrecuenciaPago
        """

        self._frecuencia_pagos = frecuencia_pagos

    @property
    def monto_pagar(self):
        """Gets the monto_pagar of this Credito.  # noqa: E501

        Es la cantidad que el Consumidor paga en el periodo asignado a la cuenta.  # noqa: E501

        :return: The monto_pagar of this Credito.  # noqa: E501
        :rtype: float
        """
        return self._monto_pagar

    @monto_pagar.setter
    def monto_pagar(self, monto_pagar):
        """Sets the monto_pagar of this Credito.

        Es la cantidad que el Consumidor paga en el periodo asignado a la cuenta.  # noqa: E501

        :param monto_pagar: The monto_pagar of this Credito.  # noqa: E501
        :type: float
        """

        self._monto_pagar = monto_pagar

    @property
    def fecha_apertura_cuenta(self):
        """Gets the fecha_apertura_cuenta of this Credito.  # noqa: E501

        La fecha de apertura es la fecha en que el Otorgante reporta la apertura del crédito al consumidor.  # noqa: E501

        :return: The fecha_apertura_cuenta of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_apertura_cuenta

    @fecha_apertura_cuenta.setter
    def fecha_apertura_cuenta(self, fecha_apertura_cuenta):
        """Sets the fecha_apertura_cuenta of this Credito.

        La fecha de apertura es la fecha en que el Otorgante reporta la apertura del crédito al consumidor.  # noqa: E501

        :param fecha_apertura_cuenta: The fecha_apertura_cuenta of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_apertura_cuenta = fecha_apertura_cuenta

    @property
    def fecha_ultimo_pago(self):
        """Gets the fecha_ultimo_pago of this Credito.  # noqa: E501

        Fecha más reciente en la que el cliente efectuó un pago.  # noqa: E501

        :return: The fecha_ultimo_pago of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_ultimo_pago

    @fecha_ultimo_pago.setter
    def fecha_ultimo_pago(self, fecha_ultimo_pago):
        """Sets the fecha_ultimo_pago of this Credito.

        Fecha más reciente en la que el cliente efectuó un pago.  # noqa: E501

        :param fecha_ultimo_pago: The fecha_ultimo_pago of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_ultimo_pago = fecha_ultimo_pago

    @property
    def fecha_ultima_compra(self):
        """Gets the fecha_ultima_compra of this Credito.  # noqa: E501

        Fecha más reciente en que el cliente efectuó una compra o disposición de crédito.  # noqa: E501

        :return: The fecha_ultima_compra of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_ultima_compra

    @fecha_ultima_compra.setter
    def fecha_ultima_compra(self, fecha_ultima_compra):
        """Sets the fecha_ultima_compra of this Credito.

        Fecha más reciente en que el cliente efectuó una compra o disposición de crédito.  # noqa: E501

        :param fecha_ultima_compra: The fecha_ultima_compra of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_ultima_compra = fecha_ultima_compra

    @property
    def fecha_cierre_cuenta(self):
        """Gets the fecha_cierre_cuenta of this Credito.  # noqa: E501

        Fecha en la que se liquidó o cerró el crédito.  # noqa: E501

        :return: The fecha_cierre_cuenta of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_cierre_cuenta

    @fecha_cierre_cuenta.setter
    def fecha_cierre_cuenta(self, fecha_cierre_cuenta):
        """Sets the fecha_cierre_cuenta of this Credito.

        Fecha en la que se liquidó o cerró el crédito.  # noqa: E501

        :param fecha_cierre_cuenta: The fecha_cierre_cuenta of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_cierre_cuenta = fecha_cierre_cuenta

    @property
    def fecha_reporte(self):
        """Gets the fecha_reporte of this Credito.  # noqa: E501

        Periodo al que corresponde el crédito reportado por el otorgante.  # noqa: E501

        :return: The fecha_reporte of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_reporte

    @fecha_reporte.setter
    def fecha_reporte(self, fecha_reporte):
        """Sets the fecha_reporte of this Credito.

        Periodo al que corresponde el crédito reportado por el otorgante.  # noqa: E501

        :param fecha_reporte: The fecha_reporte of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_reporte = fecha_reporte

    @property
    def ultima_fecha_saldo_cero(self):
        """Gets the ultima_fecha_saldo_cero of this Credito.  # noqa: E501

        Última fecha en que la cuenta quedó en ceros.  # noqa: E501

        :return: The ultima_fecha_saldo_cero of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._ultima_fecha_saldo_cero

    @ultima_fecha_saldo_cero.setter
    def ultima_fecha_saldo_cero(self, ultima_fecha_saldo_cero):
        """Sets the ultima_fecha_saldo_cero of this Credito.

        Última fecha en que la cuenta quedó en ceros.  # noqa: E501

        :param ultima_fecha_saldo_cero: The ultima_fecha_saldo_cero of this Credito.  # noqa: E501
        :type: str
        """

        self._ultima_fecha_saldo_cero = ultima_fecha_saldo_cero

    @property
    def garantia(self):
        """Gets the garantia of this Credito.  # noqa: E501

        Garantía utilizada para asegurar el crédito otorgado.  # noqa: E501

        :return: The garantia of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._garantia

    @garantia.setter
    def garantia(self, garantia):
        """Sets the garantia of this Credito.

        Garantía utilizada para asegurar el crédito otorgado.  # noqa: E501

        :param garantia: The garantia of this Credito.  # noqa: E501
        :type: str
        """

        self._garantia = garantia

    @property
    def credito_maximo(self):
        """Gets the credito_maximo of this Credito.  # noqa: E501

        Contiene el máximo importe de crédito utilizado por el cliente.  # noqa: E501

        :return: The credito_maximo of this Credito.  # noqa: E501
        :rtype: float
        """
        return self._credito_maximo

    @credito_maximo.setter
    def credito_maximo(self, credito_maximo):
        """Sets the credito_maximo of this Credito.

        Contiene el máximo importe de crédito utilizado por el cliente.  # noqa: E501

        :param credito_maximo: The credito_maximo of this Credito.  # noqa: E501
        :type: float
        """

        self._credito_maximo = credito_maximo

    @property
    def saldo_actual(self):
        """Gets the saldo_actual of this Credito.  # noqa: E501

        Saldo del crédito.  # noqa: E501

        :return: The saldo_actual of this Credito.  # noqa: E501
        :rtype: float
        """
        return self._saldo_actual

    @saldo_actual.setter
    def saldo_actual(self, saldo_actual):
        """Sets the saldo_actual of this Credito.

        Saldo del crédito.  # noqa: E501

        :param saldo_actual: The saldo_actual of this Credito.  # noqa: E501
        :type: float
        """

        self._saldo_actual = saldo_actual

    @property
    def limite_credito(self):
        """Gets the limite_credito of this Credito.  # noqa: E501

        El límite de crédito.  # noqa: E501

        :return: The limite_credito of this Credito.  # noqa: E501
        :rtype: float
        """
        return self._limite_credito

    @limite_credito.setter
    def limite_credito(self, limite_credito):
        """Sets the limite_credito of this Credito.

        El límite de crédito.  # noqa: E501

        :param limite_credito: The limite_credito of this Credito.  # noqa: E501
        :type: float
        """

        self._limite_credito = limite_credito

    @property
    def saldo_vencido(self):
        """Gets the saldo_vencido of this Credito.  # noqa: E501

        Saldo vencido de la cuenta.  # noqa: E501

        :return: The saldo_vencido of this Credito.  # noqa: E501
        :rtype: float
        """
        return self._saldo_vencido

    @saldo_vencido.setter
    def saldo_vencido(self, saldo_vencido):
        """Sets the saldo_vencido of this Credito.

        Saldo vencido de la cuenta.  # noqa: E501

        :param saldo_vencido: The saldo_vencido of this Credito.  # noqa: E501
        :type: float
        """

        self._saldo_vencido = saldo_vencido

    @property
    def numero_pagos_vencidos(self):
        """Gets the numero_pagos_vencidos of this Credito.  # noqa: E501

        Número de pagos vencidos.  # noqa: E501

        :return: The numero_pagos_vencidos of this Credito.  # noqa: E501
        :rtype: int
        """
        return self._numero_pagos_vencidos

    @numero_pagos_vencidos.setter
    def numero_pagos_vencidos(self, numero_pagos_vencidos):
        """Sets the numero_pagos_vencidos of this Credito.

        Número de pagos vencidos.  # noqa: E501

        :param numero_pagos_vencidos: The numero_pagos_vencidos of this Credito.  # noqa: E501
        :type: int
        """

        self._numero_pagos_vencidos = numero_pagos_vencidos

    @property
    def pago_actual(self):
        """Gets the pago_actual of this Credito.  # noqa: E501

        Pago actual.  # noqa: E501

        :return: The pago_actual of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._pago_actual

    @pago_actual.setter
    def pago_actual(self, pago_actual):
        """Sets the pago_actual of this Credito.

        Pago actual.  # noqa: E501

        :param pago_actual: The pago_actual of this Credito.  # noqa: E501
        :type: str
        """

        self._pago_actual = pago_actual

    @property
    def historico_pagos(self):
        """Gets the historico_pagos of this Credito.  # noqa: E501

        Histórico de pagos.  # noqa: E501

        :return: The historico_pagos of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._historico_pagos

    @historico_pagos.setter
    def historico_pagos(self, historico_pagos):
        """Sets the historico_pagos of this Credito.

        Histórico de pagos.  # noqa: E501

        :param historico_pagos: The historico_pagos of this Credito.  # noqa: E501
        :type: str
        """

        self._historico_pagos = historico_pagos

    @property
    def fecha_reciente_historico_pagos(self):
        """Gets the fecha_reciente_historico_pagos of this Credito.  # noqa: E501

        Fecha más reciente del histórico de pagos.  # noqa: E501

        :return: The fecha_reciente_historico_pagos of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_reciente_historico_pagos

    @fecha_reciente_historico_pagos.setter
    def fecha_reciente_historico_pagos(self, fecha_reciente_historico_pagos):
        """Sets the fecha_reciente_historico_pagos of this Credito.

        Fecha más reciente del histórico de pagos.  # noqa: E501

        :param fecha_reciente_historico_pagos: The fecha_reciente_historico_pagos of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_reciente_historico_pagos = fecha_reciente_historico_pagos

    @property
    def fecha_antigua_historico_pagos(self):
        """Gets the fecha_antigua_historico_pagos of this Credito.  # noqa: E501

        Fecha de inicio del patrón histórico pagos.  # noqa: E501

        :return: The fecha_antigua_historico_pagos of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_antigua_historico_pagos

    @fecha_antigua_historico_pagos.setter
    def fecha_antigua_historico_pagos(self, fecha_antigua_historico_pagos):
        """Sets the fecha_antigua_historico_pagos of this Credito.

        Fecha de inicio del patrón histórico pagos.  # noqa: E501

        :param fecha_antigua_historico_pagos: The fecha_antigua_historico_pagos of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_antigua_historico_pagos = fecha_antigua_historico_pagos

    @property
    def clave_prevencion(self):
        """Gets the clave_prevencion of this Credito.  # noqa: E501


        :return: The clave_prevencion of this Credito.  # noqa: E501
        :rtype: CatalogoPrevencion
        """
        return self._clave_prevencion

    @clave_prevencion.setter
    def clave_prevencion(self, clave_prevencion):
        """Sets the clave_prevencion of this Credito.


        :param clave_prevencion: The clave_prevencion of this Credito.  # noqa: E501
        :type: CatalogoPrevencion
        """

        self._clave_prevencion = clave_prevencion

    @property
    def total_pagos_reportados(self):
        """Gets the total_pagos_reportados of this Credito.  # noqa: E501

        Número de pagos reportados  # noqa: E501

        :return: The total_pagos_reportados of this Credito.  # noqa: E501
        :rtype: int
        """
        return self._total_pagos_reportados

    @total_pagos_reportados.setter
    def total_pagos_reportados(self, total_pagos_reportados):
        """Sets the total_pagos_reportados of this Credito.

        Número de pagos reportados  # noqa: E501

        :param total_pagos_reportados: The total_pagos_reportados of this Credito.  # noqa: E501
        :type: int
        """

        self._total_pagos_reportados = total_pagos_reportados

    @property
    def peor_atraso(self):
        """Gets the peor_atraso of this Credito.  # noqa: E501

        Mayor cantidad de pagos incumplidos en el histórico del cliente.  # noqa: E501

        :return: The peor_atraso of this Credito.  # noqa: E501
        :rtype: float
        """
        return self._peor_atraso

    @peor_atraso.setter
    def peor_atraso(self, peor_atraso):
        """Sets the peor_atraso of this Credito.

        Mayor cantidad de pagos incumplidos en el histórico del cliente.  # noqa: E501

        :param peor_atraso: The peor_atraso of this Credito.  # noqa: E501
        :type: float
        """

        self._peor_atraso = peor_atraso

    @property
    def fecha_peor_atraso(self):
        """Gets the fecha_peor_atraso of this Credito.  # noqa: E501

        Fecha en la que el cliente tuvo su peor atraso.  # noqa: E501

        :return: The fecha_peor_atraso of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._fecha_peor_atraso

    @fecha_peor_atraso.setter
    def fecha_peor_atraso(self, fecha_peor_atraso):
        """Sets the fecha_peor_atraso of this Credito.

        Fecha en la que el cliente tuvo su peor atraso.  # noqa: E501

        :param fecha_peor_atraso: The fecha_peor_atraso of this Credito.  # noqa: E501
        :type: str
        """

        self._fecha_peor_atraso = fecha_peor_atraso

    @property
    def saldo_vencido_peor_atraso(self):
        """Gets the saldo_vencido_peor_atraso of this Credito.  # noqa: E501

        Saldo vencido de la cuenta.  # noqa: E501

        :return: The saldo_vencido_peor_atraso of this Credito.  # noqa: E501
        :rtype: float
        """
        return self._saldo_vencido_peor_atraso

    @saldo_vencido_peor_atraso.setter
    def saldo_vencido_peor_atraso(self, saldo_vencido_peor_atraso):
        """Sets the saldo_vencido_peor_atraso of this Credito.

        Saldo vencido de la cuenta.  # noqa: E501

        :param saldo_vencido_peor_atraso: The saldo_vencido_peor_atraso of this Credito.  # noqa: E501
        :type: float
        """

        self._saldo_vencido_peor_atraso = saldo_vencido_peor_atraso

    @property
    def monto_ultimo_pago(self):
        """Gets the monto_ultimo_pago of this Credito.  # noqa: E501

        Monto último pago  # noqa: E501

        :return: The monto_ultimo_pago of this Credito.  # noqa: E501
        :rtype: float
        """
        return self._monto_ultimo_pago

    @monto_ultimo_pago.setter
    def monto_ultimo_pago(self, monto_ultimo_pago):
        """Sets the monto_ultimo_pago of this Credito.

        Monto último pago  # noqa: E501

        :param monto_ultimo_pago: The monto_ultimo_pago of this Credito.  # noqa: E501
        :type: float
        """

        self._monto_ultimo_pago = monto_ultimo_pago

    @property
    def id_domicilio(self):
        """Gets the id_domicilio of this Credito.  # noqa: E501

        Identificador único del domicilio  # noqa: E501

        :return: The id_domicilio of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._id_domicilio

    @id_domicilio.setter
    def id_domicilio(self, id_domicilio):
        """Sets the id_domicilio of this Credito.

        Identificador único del domicilio  # noqa: E501

        :param id_domicilio: The id_domicilio of this Credito.  # noqa: E501
        :type: str
        """

        self._id_domicilio = id_domicilio

    @property
    def servicios(self):
        """Gets the servicios of this Credito.  # noqa: E501

        <table><thead><tr><th>Clave</th><th>Descripción</th></tr></thead><tbody><tr><td>0</td><td>Sin servicios</td></tr><tr><td>1</td><td>Servicios al hogar</td></tr></tbody></table>  # noqa: E501

        :return: The servicios of this Credito.  # noqa: E501
        :rtype: str
        """
        return self._servicios

    @servicios.setter
    def servicios(self, servicios):
        """Sets the servicios of this Credito.

        <table><thead><tr><th>Clave</th><th>Descripción</th></tr></thead><tbody><tr><td>0</td><td>Sin servicios</td></tr><tr><td>1</td><td>Servicios al hogar</td></tr></tbody></table>  # noqa: E501

        :param servicios: The servicios of this Credito.  # noqa: E501
        :type: str
        """

        self._servicios = servicios

    @property
    def can(self):
        """Gets the can of this Credito.  # noqa: E501


        :return: The can of this Credito.  # noqa: E501
        :rtype: CAN
        """
        return self._can

    @can.setter
    def can(self, can):
        """Sets the can of this Credito.


        :param can: The can of this Credito.  # noqa: E501
        :type: CAN
        """

        self._can = can

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Credito, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Credito):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Credito):
            return True

        return self.to_dict() != other.to_dict()
