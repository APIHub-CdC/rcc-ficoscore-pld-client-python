# coding: utf-8

"""
    Reporte de Crédito Consolidado, FICO® Score y PLD 

    <p>Esta API reporta: el historial crediticio; el cumplimiento de pago de los compromisos que la persona ha adquirido con entidades financieras, no financieras e instituciones comerciales que dan crédito o participan en actividades afines al crédito; y filtra contra listas de cumplimiento para Prevención de Lavado de Dinero. En esta versión se retornan los campos del Crédito Asociado a Nomina (CAN) en el nodo de créditos.<br/><img src='https://developer.circulodecredito.com.mx/sites/default/files/2020-10/circulo_de_credito-apihub.png' height='40' width='220'/></p><br/>  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: api@circulodecredito.com.mx
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rcc_fico_pld_client.configuration import Configuration


class DomicilioRespuesta(object):
 

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direccion': 'str',
        'colonia_poblacion': 'str',
        'delegacion_municipio': 'str',
        'ciudad': 'str',
        'estado': 'CatalogoEstados',
        'cp': 'str',
        'fecha_residencia': 'str',
        'numero_telefono': 'str',
        'tipo_domicilio': 'CatalogoTipoDomicilio',
        'tipo_asentamiento': 'CatalogoTipoAsentamiento',
        'fecha_registro_domicilio': 'str',
        'tipo_alta_domicilio': 'int',
        'numero_otorgantes_carga': 'int',
        'numero_otorgantes_consulta': 'int',
        'id_domicilio': 'str'
    }

    attribute_map = {
        'direccion': 'direccion',
        'colonia_poblacion': 'coloniaPoblacion',
        'delegacion_municipio': 'delegacionMunicipio',
        'ciudad': 'ciudad',
        'estado': 'estado',
        'cp': 'CP',
        'fecha_residencia': 'fechaResidencia',
        'numero_telefono': 'numeroTelefono',
        'tipo_domicilio': 'tipoDomicilio',
        'tipo_asentamiento': 'tipoAsentamiento',
        'fecha_registro_domicilio': 'fechaRegistroDomicilio',
        'tipo_alta_domicilio': 'tipoAltaDomicilio',
        'numero_otorgantes_carga': 'numeroOtorgantesCarga',
        'numero_otorgantes_consulta': 'numeroOtorgantesConsulta',
        'id_domicilio': 'idDomicilio'
    }

    def __init__(self, direccion=None, colonia_poblacion=None, delegacion_municipio=None, ciudad=None, estado=None, cp=None, fecha_residencia=None, numero_telefono=None, tipo_domicilio=None, tipo_asentamiento=None, fecha_registro_domicilio=None, tipo_alta_domicilio=None, numero_otorgantes_carga=None, numero_otorgantes_consulta=None, id_domicilio=None, _configuration=None):  # noqa: E501
        """DomicilioRespuesta - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._direccion = None
        self._colonia_poblacion = None
        self._delegacion_municipio = None
        self._ciudad = None
        self._estado = None
        self._cp = None
        self._fecha_residencia = None
        self._numero_telefono = None
        self._tipo_domicilio = None
        self._tipo_asentamiento = None
        self._fecha_registro_domicilio = None
        self._tipo_alta_domicilio = None
        self._numero_otorgantes_carga = None
        self._numero_otorgantes_consulta = None
        self._id_domicilio = None
        self.discriminator = None

        if direccion is not None:
            self.direccion = direccion
        if colonia_poblacion is not None:
            self.colonia_poblacion = colonia_poblacion
        if delegacion_municipio is not None:
            self.delegacion_municipio = delegacion_municipio
        if ciudad is not None:
            self.ciudad = ciudad
        if estado is not None:
            self.estado = estado
        if cp is not None:
            self.cp = cp
        if fecha_residencia is not None:
            self.fecha_residencia = fecha_residencia
        if numero_telefono is not None:
            self.numero_telefono = numero_telefono
        if tipo_domicilio is not None:
            self.tipo_domicilio = tipo_domicilio
        if tipo_asentamiento is not None:
            self.tipo_asentamiento = tipo_asentamiento
        if fecha_registro_domicilio is not None:
            self.fecha_registro_domicilio = fecha_registro_domicilio
        if tipo_alta_domicilio is not None:
            self.tipo_alta_domicilio = tipo_alta_domicilio
        if numero_otorgantes_carga is not None:
            self.numero_otorgantes_carga = numero_otorgantes_carga
        if numero_otorgantes_consulta is not None:
            self.numero_otorgantes_consulta = numero_otorgantes_consulta
        if id_domicilio is not None:
            self.id_domicilio = id_domicilio

    @property
    def direccion(self):
        """Gets the direccion of this DomicilioRespuesta.  # noqa: E501

        Reportar el nombre de la calle, número exterior, número interior. Deben considerarse avenida,cerrada, manzana, lote, edificio,departamento etc. Debe contener por lo menos dos cadenas de caracteres para que el registro sea válido, de lo contrario el registro será rechazado.  # noqa: E501

        :return: The direccion of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._direccion

    @direccion.setter
    def direccion(self, direccion):
        """Sets the direccion of this DomicilioRespuesta.

        Reportar el nombre de la calle, número exterior, número interior. Deben considerarse avenida,cerrada, manzana, lote, edificio,departamento etc. Debe contener por lo menos dos cadenas de caracteres para que el registro sea válido, de lo contrario el registro será rechazado.  # noqa: E501

        :param direccion: The direccion of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                direccion is not None and len(direccion) > 85):
            raise ValueError("Invalid value for `direccion`, length must be less than or equal to `85`")  # noqa: E501

        self._direccion = direccion

    @property
    def colonia_poblacion(self):
        """Gets the colonia_poblacion of this DomicilioRespuesta.  # noqa: E501

        Reportar la colonia a la cual pertenece la dirección contenida en el elemento dirección.  # noqa: E501

        :return: The colonia_poblacion of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._colonia_poblacion

    @colonia_poblacion.setter
    def colonia_poblacion(self, colonia_poblacion):
        """Sets the colonia_poblacion of this DomicilioRespuesta.

        Reportar la colonia a la cual pertenece la dirección contenida en el elemento dirección.  # noqa: E501

        :param colonia_poblacion: The colonia_poblacion of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                colonia_poblacion is not None and len(colonia_poblacion) > 65):
            raise ValueError("Invalid value for `colonia_poblacion`, length must be less than or equal to `65`")  # noqa: E501

        self._colonia_poblacion = colonia_poblacion

    @property
    def delegacion_municipio(self):
        """Gets the delegacion_municipio of this DomicilioRespuesta.  # noqa: E501

        Reportar la delegación o municipio a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :return: The delegacion_municipio of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._delegacion_municipio

    @delegacion_municipio.setter
    def delegacion_municipio(self, delegacion_municipio):
        """Sets the delegacion_municipio of this DomicilioRespuesta.

        Reportar la delegación o municipio a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :param delegacion_municipio: The delegacion_municipio of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                delegacion_municipio is not None and len(delegacion_municipio) > 65):
            raise ValueError("Invalid value for `delegacion_municipio`, length must be less than or equal to `65`")  # noqa: E501

        self._delegacion_municipio = delegacion_municipio

    @property
    def ciudad(self):
        """Gets the ciudad of this DomicilioRespuesta.  # noqa: E501

        Reportar la ciudad a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :return: The ciudad of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._ciudad

    @ciudad.setter
    def ciudad(self, ciudad):
        """Sets the ciudad of this DomicilioRespuesta.

        Reportar la ciudad a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :param ciudad: The ciudad of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ciudad is not None and len(ciudad) > 65):
            raise ValueError("Invalid value for `ciudad`, length must be less than or equal to `65`")  # noqa: E501

        self._ciudad = ciudad

    @property
    def estado(self):
        """Gets the estado of this DomicilioRespuesta.  # noqa: E501


        :return: The estado of this DomicilioRespuesta.  # noqa: E501
        :rtype: CatalogoEstados
        """
        return self._estado

    @estado.setter
    def estado(self, estado):
        """Sets the estado of this DomicilioRespuesta.


        :param estado: The estado of this DomicilioRespuesta.  # noqa: E501
        :type: CatalogoEstados
        """

        self._estado = estado

    @property
    def cp(self):
        """Gets the cp of this DomicilioRespuesta.  # noqa: E501

        El código postal reportado debeestar compuesto por 5 dígitos. Para que el código postal sea válido deberá corresponder al estado reportado.  # noqa: E501

        :return: The cp of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._cp

    @cp.setter
    def cp(self, cp):
        """Sets the cp of this DomicilioRespuesta.

        El código postal reportado debeestar compuesto por 5 dígitos. Para que el código postal sea válido deberá corresponder al estado reportado.  # noqa: E501

        :param cp: The cp of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cp is not None and len(cp) > 5):
            raise ValueError("Invalid value for `cp`, length must be less than or equal to `5`")  # noqa: E501

        self._cp = cp

    @property
    def fecha_residencia(self):
        """Gets the fecha_residencia of this DomicilioRespuesta.  # noqa: E501

        Debe de reportarse la fecha desde cuando el consumidor vive en la  dirección reportada.  # noqa: E501

        :return: The fecha_residencia of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._fecha_residencia

    @fecha_residencia.setter
    def fecha_residencia(self, fecha_residencia):
        """Sets the fecha_residencia of this DomicilioRespuesta.

        Debe de reportarse la fecha desde cuando el consumidor vive en la  dirección reportada.  # noqa: E501

        :param fecha_residencia: The fecha_residencia of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """

        self._fecha_residencia = fecha_residencia

    @property
    def numero_telefono(self):
        """Gets the numero_telefono of this DomicilioRespuesta.  # noqa: E501

        Debe de contener una longitud mínima de 5 caracteres. Cada carácter debe ser un número de 0-9, si se ingresa cualquier otro carácter el registro será rechazado.  # noqa: E501

        :return: The numero_telefono of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._numero_telefono

    @numero_telefono.setter
    def numero_telefono(self, numero_telefono):
        """Sets the numero_telefono of this DomicilioRespuesta.

        Debe de contener una longitud mínima de 5 caracteres. Cada carácter debe ser un número de 0-9, si se ingresa cualquier otro carácter el registro será rechazado.  # noqa: E501

        :param numero_telefono: The numero_telefono of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                numero_telefono is not None and len(numero_telefono) > 20):
            raise ValueError("Invalid value for `numero_telefono`, length must be less than or equal to `20`")  # noqa: E501

        self._numero_telefono = numero_telefono

    @property
    def tipo_domicilio(self):
        """Gets the tipo_domicilio of this DomicilioRespuesta.  # noqa: E501


        :return: The tipo_domicilio of this DomicilioRespuesta.  # noqa: E501
        :rtype: CatalogoTipoDomicilio
        """
        return self._tipo_domicilio

    @tipo_domicilio.setter
    def tipo_domicilio(self, tipo_domicilio):
        """Sets the tipo_domicilio of this DomicilioRespuesta.


        :param tipo_domicilio: The tipo_domicilio of this DomicilioRespuesta.  # noqa: E501
        :type: CatalogoTipoDomicilio
        """

        self._tipo_domicilio = tipo_domicilio

    @property
    def tipo_asentamiento(self):
        """Gets the tipo_asentamiento of this DomicilioRespuesta.  # noqa: E501


        :return: The tipo_asentamiento of this DomicilioRespuesta.  # noqa: E501
        :rtype: CatalogoTipoAsentamiento
        """
        return self._tipo_asentamiento

    @tipo_asentamiento.setter
    def tipo_asentamiento(self, tipo_asentamiento):
        """Sets the tipo_asentamiento of this DomicilioRespuesta.


        :param tipo_asentamiento: The tipo_asentamiento of this DomicilioRespuesta.  # noqa: E501
        :type: CatalogoTipoAsentamiento
        """

        self._tipo_asentamiento = tipo_asentamiento

    @property
    def fecha_registro_domicilio(self):
        """Gets the fecha_registro_domicilio of this DomicilioRespuesta.  # noqa: E501

        Fecha en la cual se registró el domicilio.  # noqa: E501

        :return: The fecha_registro_domicilio of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._fecha_registro_domicilio

    @fecha_registro_domicilio.setter
    def fecha_registro_domicilio(self, fecha_registro_domicilio):
        """Sets the fecha_registro_domicilio of this DomicilioRespuesta.

        Fecha en la cual se registró el domicilio.  # noqa: E501

        :param fecha_registro_domicilio: The fecha_registro_domicilio of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """

        self._fecha_registro_domicilio = fecha_registro_domicilio

    @property
    def tipo_alta_domicilio(self):
        """Gets the tipo_alta_domicilio of this DomicilioRespuesta.  # noqa: E501

        Los valores posibles: 0 = Alta de crédito 1 = Consulta expediente  # noqa: E501

        :return: The tipo_alta_domicilio of this DomicilioRespuesta.  # noqa: E501
        :rtype: int
        """
        return self._tipo_alta_domicilio

    @tipo_alta_domicilio.setter
    def tipo_alta_domicilio(self, tipo_alta_domicilio):
        """Sets the tipo_alta_domicilio of this DomicilioRespuesta.

        Los valores posibles: 0 = Alta de crédito 1 = Consulta expediente  # noqa: E501

        :param tipo_alta_domicilio: The tipo_alta_domicilio of this DomicilioRespuesta.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                tipo_alta_domicilio is not None and tipo_alta_domicilio > 1):  # noqa: E501
            raise ValueError("Invalid value for `tipo_alta_domicilio`, must be a value less than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tipo_alta_domicilio is not None and tipo_alta_domicilio < 0):  # noqa: E501
            raise ValueError("Invalid value for `tipo_alta_domicilio`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tipo_alta_domicilio = tipo_alta_domicilio

    @property
    def numero_otorgantes_carga(self):
        """Gets the numero_otorgantes_carga of this DomicilioRespuesta.  # noqa: E501

        Los valores posibles: 0 = Alta de crédito 1 = Consulta expediente  # noqa: E501

        :return: The numero_otorgantes_carga of this DomicilioRespuesta.  # noqa: E501
        :rtype: int
        """
        return self._numero_otorgantes_carga

    @numero_otorgantes_carga.setter
    def numero_otorgantes_carga(self, numero_otorgantes_carga):
        """Sets the numero_otorgantes_carga of this DomicilioRespuesta.

        Los valores posibles: 0 = Alta de crédito 1 = Consulta expediente  # noqa: E501

        :param numero_otorgantes_carga: The numero_otorgantes_carga of this DomicilioRespuesta.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                numero_otorgantes_carga is not None and numero_otorgantes_carga > 1):  # noqa: E501
            raise ValueError("Invalid value for `numero_otorgantes_carga`, must be a value less than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                numero_otorgantes_carga is not None and numero_otorgantes_carga < 0):  # noqa: E501
            raise ValueError("Invalid value for `numero_otorgantes_carga`, must be a value greater than or equal to `0`")  # noqa: E501

        self._numero_otorgantes_carga = numero_otorgantes_carga

    @property
    def numero_otorgantes_consulta(self):
        """Gets the numero_otorgantes_consulta of this DomicilioRespuesta.  # noqa: E501

        Los valores posibles: 0 = Alta de crédito 1 = Consulta expediente  # noqa: E501

        :return: The numero_otorgantes_consulta of this DomicilioRespuesta.  # noqa: E501
        :rtype: int
        """
        return self._numero_otorgantes_consulta

    @numero_otorgantes_consulta.setter
    def numero_otorgantes_consulta(self, numero_otorgantes_consulta):
        """Sets the numero_otorgantes_consulta of this DomicilioRespuesta.

        Los valores posibles: 0 = Alta de crédito 1 = Consulta expediente  # noqa: E501

        :param numero_otorgantes_consulta: The numero_otorgantes_consulta of this DomicilioRespuesta.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                numero_otorgantes_consulta is not None and numero_otorgantes_consulta > 1):  # noqa: E501
            raise ValueError("Invalid value for `numero_otorgantes_consulta`, must be a value less than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                numero_otorgantes_consulta is not None and numero_otorgantes_consulta < 0):  # noqa: E501
            raise ValueError("Invalid value for `numero_otorgantes_consulta`, must be a value greater than or equal to `0`")  # noqa: E501

        self._numero_otorgantes_consulta = numero_otorgantes_consulta

    @property
    def id_domicilio(self):
        """Gets the id_domicilio of this DomicilioRespuesta.  # noqa: E501

        Identificador único del domicilio  # noqa: E501

        :return: The id_domicilio of this DomicilioRespuesta.  # noqa: E501
        :rtype: str
        """
        return self._id_domicilio

    @id_domicilio.setter
    def id_domicilio(self, id_domicilio):
        """Sets the id_domicilio of this DomicilioRespuesta.

        Identificador único del domicilio  # noqa: E501

        :param id_domicilio: The id_domicilio of this DomicilioRespuesta.  # noqa: E501
        :type: str
        """

        self._id_domicilio = id_domicilio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DomicilioRespuesta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomicilioRespuesta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DomicilioRespuesta):
            return True

        return self.to_dict() != other.to_dict()
