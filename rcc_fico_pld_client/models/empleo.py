# coding: utf-8

"""
    Reporte de Crédito Consolidado, FICO® Score y PLD 

    <p>Esta API reporta: el historial crediticio; el cumplimiento de pago de los compromisos que la persona ha adquirido con entidades financieras, no financieras e instituciones comerciales que dan crédito o participan en actividades afines al crédito; y filtra contra listas de cumplimiento para Prevención de Lavado de Dinero. En esta versión se retornan los campos del Crédito Asociado a Nomina (CAN) en el nodo de créditos.<br/><img src='https://developer.circulodecredito.com.mx/sites/default/files/2020-10/circulo_de_credito-apihub.png' height='40' width='220'/></p><br/>  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: api@circulodecredito.com.mx
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rcc_fico_pld_client.configuration import Configuration


class Empleo(object):
   

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nombre_empresa': 'str',
        'direccion': 'str',
        'colonia_poblacion': 'str',
        'delegacion_municipio': 'str',
        'ciudad': 'str',
        'estado': 'CatalogoEstados',
        'cp': 'str',
        'numero_telefono': 'str',
        'extension': 'str',
        'fax': 'str',
        'puesto': 'str',
        'fecha_contratacion': 'str',
        'clave_moneda': 'CatalogoMoneda',
        'salario_mensual': 'float',
        'fecha_ultimo_dia_empleo': 'str',
        'fecha_verificacion_empleo': 'str'
    }

    attribute_map = {
        'nombre_empresa': 'nombreEmpresa',
        'direccion': 'direccion',
        'colonia_poblacion': 'coloniaPoblacion',
        'delegacion_municipio': 'delegacionMunicipio',
        'ciudad': 'ciudad',
        'estado': 'estado',
        'cp': 'CP',
        'numero_telefono': 'numeroTelefono',
        'extension': 'extension',
        'fax': 'fax',
        'puesto': 'puesto',
        'fecha_contratacion': 'fechaContratacion',
        'clave_moneda': 'claveMoneda',
        'salario_mensual': 'salarioMensual',
        'fecha_ultimo_dia_empleo': 'fechaUltimoDiaEmpleo',
        'fecha_verificacion_empleo': 'fechaVerificacionEmpleo'
    }

    def __init__(self, nombre_empresa=None, direccion=None, colonia_poblacion=None, delegacion_municipio=None, ciudad=None, estado=None, cp=None, numero_telefono=None, extension=None, fax=None, puesto=None, fecha_contratacion=None, clave_moneda=None, salario_mensual=None, fecha_ultimo_dia_empleo=None, fecha_verificacion_empleo=None, _configuration=None):  # noqa: E501
        """Empleo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nombre_empresa = None
        self._direccion = None
        self._colonia_poblacion = None
        self._delegacion_municipio = None
        self._ciudad = None
        self._estado = None
        self._cp = None
        self._numero_telefono = None
        self._extension = None
        self._fax = None
        self._puesto = None
        self._fecha_contratacion = None
        self._clave_moneda = None
        self._salario_mensual = None
        self._fecha_ultimo_dia_empleo = None
        self._fecha_verificacion_empleo = None
        self.discriminator = None

        if nombre_empresa is not None:
            self.nombre_empresa = nombre_empresa
        if direccion is not None:
            self.direccion = direccion
        if colonia_poblacion is not None:
            self.colonia_poblacion = colonia_poblacion
        if delegacion_municipio is not None:
            self.delegacion_municipio = delegacion_municipio
        if ciudad is not None:
            self.ciudad = ciudad
        if estado is not None:
            self.estado = estado
        if cp is not None:
            self.cp = cp
        if numero_telefono is not None:
            self.numero_telefono = numero_telefono
        if extension is not None:
            self.extension = extension
        if fax is not None:
            self.fax = fax
        if puesto is not None:
            self.puesto = puesto
        if fecha_contratacion is not None:
            self.fecha_contratacion = fecha_contratacion
        if clave_moneda is not None:
            self.clave_moneda = clave_moneda
        if salario_mensual is not None:
            self.salario_mensual = salario_mensual
        if fecha_ultimo_dia_empleo is not None:
            self.fecha_ultimo_dia_empleo = fecha_ultimo_dia_empleo
        if fecha_verificacion_empleo is not None:
            self.fecha_verificacion_empleo = fecha_verificacion_empleo

    @property
    def nombre_empresa(self):
        """Gets the nombre_empresa of this Empleo.  # noqa: E501

        Nombre o Razón Social de la empresa que emplea al Cliente. Cuando el consumidor sea trabajador independiente, no está asociado a una empresa o no cuenta con un trabajo se reportará uno de los siguientes posibles valores: <ul><li>Trabajador Independiente</li><li>Estudiante</li><li>Labores de Hogar</li><li>Jubilado</li><li>Desempleado</li><li>Exempleado</li></ul>  # noqa: E501

        :return: The nombre_empresa of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._nombre_empresa

    @nombre_empresa.setter
    def nombre_empresa(self, nombre_empresa):
        """Sets the nombre_empresa of this Empleo.

        Nombre o Razón Social de la empresa que emplea al Cliente. Cuando el consumidor sea trabajador independiente, no está asociado a una empresa o no cuenta con un trabajo se reportará uno de los siguientes posibles valores: <ul><li>Trabajador Independiente</li><li>Estudiante</li><li>Labores de Hogar</li><li>Jubilado</li><li>Desempleado</li><li>Exempleado</li></ul>  # noqa: E501

        :param nombre_empresa: The nombre_empresa of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                nombre_empresa is not None and len(nombre_empresa) > 40):
            raise ValueError("Invalid value for `nombre_empresa`, length must be less than or equal to `40`")  # noqa: E501

        self._nombre_empresa = nombre_empresa

    @property
    def direccion(self):
        """Gets the direccion of this Empleo.  # noqa: E501

        Reportar el nombre de la calle, número exterior, número interior. Deben considerarse avenida,cerrada, manzana, lote, edificio,departamento etc. Debe contener por lo menos dos cadenas de caracteres para que el registro sea válido, de lo contrario el registro será rechazado.  # noqa: E501

        :return: The direccion of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._direccion

    @direccion.setter
    def direccion(self, direccion):
        """Sets the direccion of this Empleo.

        Reportar el nombre de la calle, número exterior, número interior. Deben considerarse avenida,cerrada, manzana, lote, edificio,departamento etc. Debe contener por lo menos dos cadenas de caracteres para que el registro sea válido, de lo contrario el registro será rechazado.  # noqa: E501

        :param direccion: The direccion of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                direccion is not None and len(direccion) > 80):
            raise ValueError("Invalid value for `direccion`, length must be less than or equal to `80`")  # noqa: E501

        self._direccion = direccion

    @property
    def colonia_poblacion(self):
        """Gets the colonia_poblacion of this Empleo.  # noqa: E501

        Reportar la colonia a la cual pertenece la dirección contenida en el elemento dirección.  # noqa: E501

        :return: The colonia_poblacion of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._colonia_poblacion

    @colonia_poblacion.setter
    def colonia_poblacion(self, colonia_poblacion):
        """Sets the colonia_poblacion of this Empleo.

        Reportar la colonia a la cual pertenece la dirección contenida en el elemento dirección.  # noqa: E501

        :param colonia_poblacion: The colonia_poblacion of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                colonia_poblacion is not None and len(colonia_poblacion) > 65):
            raise ValueError("Invalid value for `colonia_poblacion`, length must be less than or equal to `65`")  # noqa: E501

        self._colonia_poblacion = colonia_poblacion

    @property
    def delegacion_municipio(self):
        """Gets the delegacion_municipio of this Empleo.  # noqa: E501

        Reportar la delegación o municipio a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :return: The delegacion_municipio of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._delegacion_municipio

    @delegacion_municipio.setter
    def delegacion_municipio(self, delegacion_municipio):
        """Sets the delegacion_municipio of this Empleo.

        Reportar la delegación o municipio a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :param delegacion_municipio: The delegacion_municipio of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                delegacion_municipio is not None and len(delegacion_municipio) > 65):
            raise ValueError("Invalid value for `delegacion_municipio`, length must be less than or equal to `65`")  # noqa: E501

        self._delegacion_municipio = delegacion_municipio

    @property
    def ciudad(self):
        """Gets the ciudad of this Empleo.  # noqa: E501

        Reportar la ciudad a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :return: The ciudad of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._ciudad

    @ciudad.setter
    def ciudad(self, ciudad):
        """Sets the ciudad of this Empleo.

        Reportar la ciudad a la cual pertenece la dirección contenida en el elemento Dirección.  # noqa: E501

        :param ciudad: The ciudad of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                ciudad is not None and len(ciudad) > 65):
            raise ValueError("Invalid value for `ciudad`, length must be less than or equal to `65`")  # noqa: E501

        self._ciudad = ciudad

    @property
    def estado(self):
        """Gets the estado of this Empleo.  # noqa: E501


        :return: The estado of this Empleo.  # noqa: E501
        :rtype: CatalogoEstados
        """
        return self._estado

    @estado.setter
    def estado(self, estado):
        """Sets the estado of this Empleo.


        :param estado: The estado of this Empleo.  # noqa: E501
        :type: CatalogoEstados
        """

        self._estado = estado

    @property
    def cp(self):
        """Gets the cp of this Empleo.  # noqa: E501

        El código postal reportado debeestar compuesto por 5 dígitos. Para que el código postal sea válido deberá corresponder al estado reportado.  # noqa: E501

        :return: The cp of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._cp

    @cp.setter
    def cp(self, cp):
        """Sets the cp of this Empleo.

        El código postal reportado debeestar compuesto por 5 dígitos. Para que el código postal sea válido deberá corresponder al estado reportado.  # noqa: E501

        :param cp: The cp of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                cp is not None and len(cp) > 5):
            raise ValueError("Invalid value for `cp`, length must be less than or equal to `5`")  # noqa: E501

        self._cp = cp

    @property
    def numero_telefono(self):
        """Gets the numero_telefono of this Empleo.  # noqa: E501

        Debe de contener una longitud mínima de 5 caracteres. Cada carácter debe ser un número de 0-9, si se ingresa cualquier otro carácter el registro será rechazado.  # noqa: E501

        :return: The numero_telefono of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._numero_telefono

    @numero_telefono.setter
    def numero_telefono(self, numero_telefono):
        """Sets the numero_telefono of this Empleo.

        Debe de contener una longitud mínima de 5 caracteres. Cada carácter debe ser un número de 0-9, si se ingresa cualquier otro carácter el registro será rechazado.  # noqa: E501

        :param numero_telefono: The numero_telefono of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                numero_telefono is not None and len(numero_telefono) > 20):
            raise ValueError("Invalid value for `numero_telefono`, length must be less than or equal to `20`")  # noqa: E501

        self._numero_telefono = numero_telefono

    @property
    def extension(self):
        """Gets the extension of this Empleo.  # noqa: E501

        Si se cuenta con la información reportar la extensión telefónica del consumidor.  # noqa: E501

        :return: The extension of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this Empleo.

        Si se cuenta con la información reportar la extensión telefónica del consumidor.  # noqa: E501

        :param extension: The extension of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                extension is not None and len(extension) > 8):
            raise ValueError("Invalid value for `extension`, length must be less than or equal to `8`")  # noqa: E501

        self._extension = extension

    @property
    def fax(self):
        """Gets the fax of this Empleo.  # noqa: E501

        Mismos criterios de validación que en el elemento Número Telefónico.  # noqa: E501

        :return: The fax of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Empleo.

        Mismos criterios de validación que en el elemento Número Telefónico.  # noqa: E501

        :param fax: The fax of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                fax is not None and len(fax) > 20):
            raise ValueError("Invalid value for `fax`, length must be less than or equal to `20`")  # noqa: E501

        self._fax = fax

    @property
    def puesto(self):
        """Gets the puesto of this Empleo.  # noqa: E501

        Título o posición de empleo.  # noqa: E501

        :return: The puesto of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._puesto

    @puesto.setter
    def puesto(self, puesto):
        """Sets the puesto of this Empleo.

        Título o posición de empleo.  # noqa: E501

        :param puesto: The puesto of this Empleo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                puesto is not None and len(puesto) > 60):
            raise ValueError("Invalid value for `puesto`, length must be less than or equal to `60`")  # noqa: E501

        self._puesto = puesto

    @property
    def fecha_contratacion(self):
        """Gets the fecha_contratacion of this Empleo.  # noqa: E501

        Fecha de contratación.  # noqa: E501

        :return: The fecha_contratacion of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._fecha_contratacion

    @fecha_contratacion.setter
    def fecha_contratacion(self, fecha_contratacion):
        """Sets the fecha_contratacion of this Empleo.

        Fecha de contratación.  # noqa: E501

        :param fecha_contratacion: The fecha_contratacion of this Empleo.  # noqa: E501
        :type: str
        """

        self._fecha_contratacion = fecha_contratacion

    @property
    def clave_moneda(self):
        """Gets the clave_moneda of this Empleo.  # noqa: E501


        :return: The clave_moneda of this Empleo.  # noqa: E501
        :rtype: CatalogoMoneda
        """
        return self._clave_moneda

    @clave_moneda.setter
    def clave_moneda(self, clave_moneda):
        """Sets the clave_moneda of this Empleo.


        :param clave_moneda: The clave_moneda of this Empleo.  # noqa: E501
        :type: CatalogoMoneda
        """

        self._clave_moneda = clave_moneda

    @property
    def salario_mensual(self):
        """Gets the salario_mensual of this Empleo.  # noqa: E501

        Debe de reportarse el ingreso mensual del consumidor. En caso de Reportar Clave de Moneda este elemento se hace requerido.  # noqa: E501

        :return: The salario_mensual of this Empleo.  # noqa: E501
        :rtype: float
        """
        return self._salario_mensual

    @salario_mensual.setter
    def salario_mensual(self, salario_mensual):
        """Sets the salario_mensual of this Empleo.

        Debe de reportarse el ingreso mensual del consumidor. En caso de Reportar Clave de Moneda este elemento se hace requerido.  # noqa: E501

        :param salario_mensual: The salario_mensual of this Empleo.  # noqa: E501
        :type: float
        """

        self._salario_mensual = salario_mensual

    @property
    def fecha_ultimo_dia_empleo(self):
        """Gets the fecha_ultimo_dia_empleo of this Empleo.  # noqa: E501

        Debe de reportarse la fecha del último día de trabajo en esta empresa.  # noqa: E501

        :return: The fecha_ultimo_dia_empleo of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._fecha_ultimo_dia_empleo

    @fecha_ultimo_dia_empleo.setter
    def fecha_ultimo_dia_empleo(self, fecha_ultimo_dia_empleo):
        """Sets the fecha_ultimo_dia_empleo of this Empleo.

        Debe de reportarse la fecha del último día de trabajo en esta empresa.  # noqa: E501

        :param fecha_ultimo_dia_empleo: The fecha_ultimo_dia_empleo of this Empleo.  # noqa: E501
        :type: str
        """

        self._fecha_ultimo_dia_empleo = fecha_ultimo_dia_empleo

    @property
    def fecha_verificacion_empleo(self):
        """Gets the fecha_verificacion_empleo of this Empleo.  # noqa: E501

        Debe de reportarse la fecha en que se verifico el puesto de trabajo en esta empresa.  # noqa: E501

        :return: The fecha_verificacion_empleo of this Empleo.  # noqa: E501
        :rtype: str
        """
        return self._fecha_verificacion_empleo

    @fecha_verificacion_empleo.setter
    def fecha_verificacion_empleo(self, fecha_verificacion_empleo):
        """Sets the fecha_verificacion_empleo of this Empleo.

        Debe de reportarse la fecha en que se verifico el puesto de trabajo en esta empresa.  # noqa: E501

        :param fecha_verificacion_empleo: The fecha_verificacion_empleo of this Empleo.  # noqa: E501
        :type: str
        """

        self._fecha_verificacion_empleo = fecha_verificacion_empleo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Empleo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Empleo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Empleo):
            return True

        return self.to_dict() != other.to_dict()
